{"version":3,"sources":["Components/Account/Account.tsx","Utils/ToastFunctions.ts","res/arrowright.svg","Components/Transaction/Transaction.tsx","Components/UpperList/UpperList.tsx","Components/Blockchain/Block.tsx","Components/Blockchain/Blockchain.tsx","Components/LogList/LogList.tsx","App.tsx","index.tsx","Utils/Interfaces.ts","Utils/Functions.ts"],"names":["Account","className","this","props","account","idString","privateKey","address","balanceBeforeBlock","lastConfirmedBlock","React","Component","warnStyle","backgroundColor","options","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","style","showError","msg","toast","error","_g","Transaction","state","from","to","amount","sign","t","transaction","signFunction","addLogFunction","type","message","id","setState","draggableId","index","provided","snapshot","isDragging","ref","innerRef","draggableProps","dragHandleProps","editable","value","onChange","v","newValue","parseInt","target","removeSignatureFunction","Array","numberOfAccounts","keys","map","x","min","max","event","val","isNaN","signed","signature","onClick","UpperList","printAccountList","accounts","length","color","emptyText","printTransactionList","transactions","transactionOrder","printFunction","err","arg","addFunction","console","log","blockList","title","droppableId","isDropDisabled","dropDisabled","droppableProps","isDraggingOver","placeholder","Block","block","confirmFunction","prevHash","nonce","confirmed","validStartHash","hash","substr","_excluded","_extends","Object","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgArrowright","_ref","svgRef","titleId","xmlns","enableBackground","xmlSpace","viewBox","y","y2","x1","x2","stroke","strokeMiterlimit","y1","strokeWidth","points","fill","ForwardRef","Blockchain","printBlocks","blocks","array","Fragment","LogList","logsVisible","logs","time","App","addAccount","count","accountIdCount","a","generateAccount","arr","push","addLog","addTransaction","transactionIdCount","unusedArr","unusedTransactions","signTransaction","sender","privateKeyArray","addressArray","sig","transactionArray","signatureArray","removeSignature","recalculateBlocks","nextId","blockIdCount","lastUnusedBlock","changed","lastConfirmed","generateBlockHash","confirmBlock","warn","verifyAllBlockTransactions","balancesAfterBlock","j","slice","blockString","blockToString","iterations","startTime","performance","now","generateBlockHashFromString","startsWith","endTime","onDragEnd","result","destination","sourceIndex","destinationIndex","transactionId","replace","transactionList","splice","blockId","blockIndex","sourceBlockId","destinationBlockId","sourceTransactions","destinationTransactions","date","Date","h","getHours","m","getMinutes","s","getSeconds","href","rel","curr","ReactDOM","render","StrictMode","document","getElementById","repeat","maxInitialBalance","getStringFromArray","Buffer","util","encodeBase64","toString","getArrayFromString","str","encode","messageArr","transactionToString","nacl","detached","verifyTransaction","verify","b","sha256","obj","JSON","stringify","pair","keyPair","secretKey","publicKey","generateKeyAddressPair","balance","Math","floor","random"],"mappings":"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","file":"static/js/main.3ca51bfc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { account } from \"../../Utils/Interfaces\";\r\nimport \"./Account.scss\"\r\nimport \"../UpperList/UpperList.scss\"\r\n\r\ninterface AccountProps {\r\n    account: account,\r\n    lastConfirmedBlock: number\r\n}\r\n\r\nclass Account extends React.Component<AccountProps, {}> {\r\n    render() {\r\n        return <div className={\"account listElement\"}>\r\n            <table className={\"accountTable listTable\"}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td className={\"id\"}>{this.props.account.idString}</td>\r\n                        <td className={\"privateKey smallText\"}>{this.props.account.privateKey}</td>\r\n                        <td className={\"address smallText\"}>{this.props.account.address}</td>\r\n                        <td className={\"balance\"}>{this.props.account.balanceBeforeBlock[this.props.lastConfirmedBlock + 1]}</td>\r\n                    </tr>\r\n                    <tr className={\"description\"}>\r\n                        <td>ID</td>\r\n                        <td>Private Key</td>\r\n                        <td>Address</td>\r\n                        <td>Balance</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default Account;","import {toast, ToastOptions} from \"react-toastify\";\r\n\r\nconst warnStyle = {\r\n    backgroundColor: \"#FF5226\"\r\n}\r\n\r\nconst options : ToastOptions = {\r\n    position: \"top-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: false,\r\n    progress: undefined,\r\n    style: warnStyle\r\n}\r\n\r\nexport function showError(msg: string) : void {\r\n    toast.error(msg, options);\r\n}\r\n\r\nexport function showWarning(msg: string) : void {\r\n    toast.warn(msg, {...options, style: warnStyle});\r\n}","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgArrowright(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    id: \"Layer_1\",\n    enableBackground: \"new 0 0 150 50\",\n    xmlSpace: \"preserve\",\n    viewBox: \"0 0 150 50\",\n    y: \"0px\",\n    x: \"0px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"line\", {\n    y2: 24.704,\n    x1: 1.266,\n    x2: 125.3,\n    stroke: \"white\",\n    strokeMiterlimit: 10,\n    y1: 24.704,\n    strokeWidth: 6\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"124.4 6.284 124.4 44.606 148.35 23.69\",\n    stroke: \"white\",\n    fill: \"white\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowright);\nexport default __webpack_public_path__ + \"static/media/arrowright.8349a54a.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport { transaction } from \"../../Utils/Interfaces\";\r\nimport \"./Transaction.scss\"\r\nimport \"../UpperList/UpperList.scss\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { showError } from \"../../Utils/ToastFunctions\";\r\n\r\ninterface TransactionProps {\r\n    transaction: transaction,\r\n    numberOfAccounts: number,\r\n    signFunction: any,\r\n    removeSignatureFunction: any,\r\n    index: number,\r\n    addLogFunction: any\r\n}\r\n\r\ninterface transactionState {\r\n    from: number,\r\n    to: number\r\n    amount: number\r\n}\r\n\r\nclass Transaction extends React.Component<TransactionProps, {}> {\r\n    componentDidMount() {\r\n        let t = this.props.transaction;\r\n        if (t.from !== undefined && t.to !== undefined && t.amount !== undefined) {\r\n            this.setState({\r\n                from: t.from,\r\n                to: t.to,\r\n                amount: t.amount,\r\n            });\r\n        }\r\n    }\r\n\r\n    state: transactionState = {\r\n        from: 0,\r\n        to: 0,\r\n        amount: 0\r\n    }\r\n\r\n    sign = () => {\r\n        if (this.state.from !== -1 && this.state.to !== -1 && this.state.amount !== -1) {\r\n            let t = this.props.transaction;\r\n            t.from = this.state.from;\r\n            t.to = this.state.to;\r\n            t.amount = this.state.amount\r\n\r\n            this.props.signFunction(t);\r\n        } else {\r\n            showError(\"All values must be set to sign a transaction!\");\r\n            this.props.addLogFunction({\r\n                type: \"error\",\r\n                message: \"Transaction \" + this.props.transaction.id + \": All values must be set to sign the transaction!\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return <Draggable draggableId={\"transaction\" + this.props.transaction.id} index={this.props.index}>\r\n            {(provided, snapshot) => (\r\n                <div className={\"transaction listElement\" + (snapshot.isDragging ? \" transactionDragging\" : \"\")}\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                >\r\n                    <table className={\"transactionTable listTable\"}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className={\"id\"}>{this.props.transaction.idString}</td>\r\n                                <td className={\"from\" + (!this.props.transaction.editable ? \" biggerText\" : \"\")}>\r\n                                    {\r\n                                        this.props.transaction.editable ?\r\n                                            <select className={\"selectStyle\"}\r\n                                                value={this.state.from}\r\n                                                onChange={(v) => {\r\n                                                    let newValue = parseInt(v.target.value);\r\n                                                    if (this.state.from !== newValue) {\r\n                                                        this.props.removeSignatureFunction(this.props.transaction.id);\r\n                                                        this.setState({ from: newValue });\r\n                                                    }\r\n                                                }}>\r\n                                                {\r\n                                                    Array.from(Array(this.props.numberOfAccounts).keys()).map(x => {\r\n                                                        return <option value={x} key={x}>a{x}</option>\r\n                                                    })}\r\n                                            </select>\r\n                                            :\r\n                                            \"a\" + this.props.transaction.from\r\n                                    }\r\n                                </td>\r\n                                <td className={\"to\" + (!this.props.transaction.editable ? \" biggerText\" : \"\")}>\r\n                                    {\r\n                                        this.props.transaction.editable ?\r\n                                            <select className={\"selectStyle\"}\r\n                                                value={this.state.to}\r\n                                                onChange={(v) => {\r\n                                                    let newValue = parseInt(v.target.value);\r\n                                                    if (this.state.to !== newValue) {\r\n                                                        this.props.removeSignatureFunction(this.props.transaction.id);\r\n                                                        this.setState({ to: newValue });\r\n                                                    }\r\n                                                }}>\r\n                                                {\r\n                                                    Array.from(Array(this.props.numberOfAccounts).keys()).map(x => {\r\n                                                        return <option value={x} key={x}>a{x}</option>\r\n                                                    })}\r\n                                            </select>\r\n                                            :\r\n                                            \"a\" + this.props.transaction.to\r\n                                    }\r\n                                </td>\r\n                                <td className={\"amount\"}>\r\n                                    {\r\n                                        this.props.transaction.editable ?\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                className={\"amountInput\"}\r\n                                                min=\"0\"\r\n                                                max=\"1000\"\r\n                                                value={this.state.amount}\r\n                                                onChange={(event) => {\r\n                                                    let val = parseInt(event.target.value);\r\n\r\n                                                    if (!isNaN(val)) {\r\n                                                        let oldValue = this.state.amount;\r\n                                                        if (oldValue !== val) {\r\n                                                            this.props.removeSignatureFunction(this.props.transaction.id);\r\n                                                        }\r\n\r\n                                                        this.setState({ amount: val });\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                            :\r\n                                            this.props.transaction.amount\r\n                                    }\r\n                                </td>\r\n                                <td className={\"signature\" + (this.props.transaction.signed ? \" smallText\" : \"\")}>\r\n                                    {\r\n                                        this.props.transaction.signed ?\r\n                                            this.props.transaction.signature\r\n                                            :\r\n                                            <div className={\"signButton button\"} onClick={() => this.sign()}>Sign</div>\r\n                                    }\r\n                                </td>\r\n                            </tr>\r\n                            <tr className={\"description\"}>\r\n                                <td>ID</td>\r\n                                <td>From</td>\r\n                                <td>To</td>\r\n                                <td>Amount</td>\r\n                                <td>Signature</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )}\r\n        </Draggable>;\r\n    }\r\n}\r\n\r\nexport default Transaction;","import React from 'react';\r\nimport './UpperList.scss';\r\nimport { account, transaction } from \"../../Utils/Interfaces\";\r\nimport Account from \"../Account/Account\";\r\nimport Transaction from \"../Transaction/Transaction\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\n\r\ninterface UpperListProps {\r\n    title: string;\r\n    accounts?: account[],\r\n    transactions?: transaction[],\r\n    transactionOrder?: number[],\r\n    numberOfAccounts?: number,\r\n    className?: string\r\n    addFunction?: any\r\n    signFunction?: any,\r\n    removeSignatureFunction?: any,\r\n    blockList?: boolean,\r\n    droppableId: string,\r\n    dropDisabled?: boolean,\r\n    lastConfirmedBlock?: number,\r\n    emptyText?: string,\r\n    addLogFunction: any\r\n}\r\n\r\nclass UpperList extends React.Component<UpperListProps, {}> {\r\n    render() {\r\n        let printFunction: any = (err: any) => { return <div className={\"listError\"}>{err}</div> };\r\n        let arg: any = \"Error\";\r\n        if (this.props.accounts) {\r\n            printFunction = this.printAccountList;\r\n            arg = this.props.accounts;\r\n        } else if (this.props.transactions) {\r\n            printFunction = this.printTransactionList;\r\n            arg = this.props.transactions\r\n        }\r\n\r\n        let addFunction = this.props.addFunction;\r\n        if (!addFunction) addFunction = () => { console.log(\"Error: function is not defined\") };\r\n\r\n        return (<div className={\"upperListContainer \" + this.props.className}>\r\n            {\r\n                this.props.blockList ?\r\n                    \"\"\r\n                    :\r\n                    <div className={\"upperListTitle\"}>{this.props.title}</div>\r\n\r\n            }\r\n            <Droppable droppableId={this.props.droppableId} isDropDisabled={this.props.dropDisabled}>\r\n                {(provided, snapshot) => (\r\n                    <div ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                        className={\"upperList\"}\r\n                        style={{ backgroundColor: snapshot.isDraggingOver ? \"rgba(255,255,255,0.05)\" : \"\" }}\r\n                    >\r\n                        {printFunction(arg)}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}</Droppable>\r\n            {\r\n                this.props.blockList ?\r\n                    \"\"\r\n                    :\r\n                    <div className={\"addButtonContainer\"}>\r\n                        <div className={\"addButton button\"} onClick={() => addFunction()}>\r\n                            Add\r\n                        </div>\r\n                    </div>\r\n            }\r\n        </div>);\r\n    }\r\n\r\n    printAccountList = (accounts: account[]) => {\r\n        let lastConfirmedBlock = this.props.lastConfirmedBlock ?? -1;\r\n\r\n        if (accounts.length === 0) {\r\n            return <div style={{ color: \"#575757\" }}>{this.props.emptyText}</div>\r\n        }\r\n\r\n        return accounts.map(function (value) {\r\n            return <Account account={value} key={value.id} lastConfirmedBlock={lastConfirmedBlock} />;\r\n        });\r\n    }\r\n\r\n    printTransactionList = (transactions: transaction[]) => {\r\n        let numberOfAccounts = 0;\r\n        if (this.props?.numberOfAccounts) {\r\n            numberOfAccounts = this.props.numberOfAccounts\r\n        }\r\n        let transactionOrder = this.props.transactionOrder;\r\n        if (transactionOrder === undefined) transactionOrder = [];\r\n        let signFunction = this.props.signFunction;\r\n        let removeSignatureFunction = this.props.removeSignatureFunction;\r\n\r\n        if (transactionOrder.length === 0) {\r\n            return <div style={{ color: \"#575757\" }}>{this.props.emptyText}</div>\r\n        }\r\n\r\n        let addLogFunction = this.props.addLogFunction;\r\n\r\n        return (transactionOrder.map(function (value, index) {\r\n            return <Transaction transaction={transactions[value]} numberOfAccounts={numberOfAccounts} key={value}\r\n                signFunction={signFunction} removeSignatureFunction={removeSignatureFunction} index={index} addLogFunction={addLogFunction} />\r\n        }));\r\n    }\r\n}\r\n\r\nexport default UpperList;","import React from 'react';\r\nimport \"./Blockchain.scss\";\r\nimport { block, transaction, validStartHash } from \"../../Utils/Interfaces\";\r\nimport UpperList from \"../UpperList/UpperList\";\r\n\r\ninterface BlockProps {\r\n    block: block,\r\n    transactions: transaction[],\r\n    confirmFunction: any,\r\n    addLogFunction: any\r\n}\r\n\r\nclass Block extends React.Component<BlockProps, {}> {\r\n    printTransactionList = () => {\r\n        return <UpperList\r\n            droppableId={\"block\" + this.props.block.id}\r\n            title={\"transactions\"}\r\n            transactions={this.props.transactions}\r\n            transactionOrder={this.props.block.transactions}\r\n            className={\"transactionListContainer\"}\r\n            emptyText={\"Drag and drop transactions here!\"}\r\n            blockList={true}\r\n            addLogFunction={this.props.addLogFunction} />\r\n    }\r\n\r\n    confirmFunction = () => {\r\n        this.props.confirmFunction(this.props.block.id);\r\n    }\r\n\r\n    render() {\r\n        return <div className={\"blockContainer\"}>\r\n            <div className={\"block\"}>\r\n                <div className={\"prevHash blockSmallText\"}>\r\n                    {this.props.block?.prevHash}\r\n                    <div className={\"blockDescription\"}>Previous hash</div>\r\n                </div>\r\n                <div className={\"transactions\"}>\r\n                    <div className={\"transactionList\"}>\r\n                        {this.printTransactionList()}\r\n                    </div>\r\n                    <div className={\"blockDescription\"}>Transactions</div>\r\n                </div>\r\n                <div className={\"nonce\"}>\r\n                    {this.props.block?.nonce}\r\n                    <div className={\"blockDescription\"}>Nonce</div>\r\n                </div>\r\n                <div className={\"confirmContainer\"}>\r\n                    {\r\n                        this.props.block.confirmed ?\r\n                            <span className={\"confirmedString\"}>confirmed</span>\r\n                            :\r\n                            <div className={\"confirmButton button\"} onClick={() => this.confirmFunction()}>\r\n                                Confirm\r\n                            </div>\r\n                    }\r\n                    <div className={\"blockDescription\"}>Confirmation</div>\r\n                </div>\r\n                <div className={\"hash blockSmallText\"}>\r\n                    {\r\n                        this.props.block.confirmed ?\r\n                            <span>\r\n                                <span className={\"confirmedString\"}>{validStartHash}</span>\r\n                                {this.props.block?.hash?.substr(validStartHash.length)}\r\n                            </span>\r\n                            :\r\n                            this.props.block?.hash\r\n                    }\r\n                    <div className={\"blockDescription\"}>Hash</div>\r\n                </div>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default Block;","import React from 'react';\r\nimport \"./Blockchain.scss\";\r\nimport { block, transaction } from \"../../Utils/Interfaces\";\r\nimport Block from \"./Block\";\r\nimport { ReactComponent as Arrow } from \"../../res/arrowright.svg\";\r\n\r\ninterface BlockchainProps {\r\n    blocks: block[],\r\n    transactions: transaction[],\r\n    confirmFunction: any,\r\n    addLogFunction: any\r\n}\r\n\r\nclass Blockchain extends React.Component<BlockchainProps, {}> {\r\n    render() {\r\n        return <div className={\"blockchain\"}>\r\n            {this.printBlocks()}\r\n        </div>;\r\n    }\r\n    printBlocks = () => {\r\n        let transactions = this.props.transactions;\r\n        let confirmFunction = this.props.confirmFunction;\r\n        let addLogFunction = this.props.addLogFunction;\r\n\r\n        return this.props.blocks.map(function (value, index, array) {\r\n            return (\r\n                <React.Fragment key={index}>\r\n                    <Block\r\n                        block={value}\r\n                        transactions={transactions}\r\n                        confirmFunction={confirmFunction}\r\n                        addLogFunction={addLogFunction}\r\n                    />\r\n                    {index !== array.length - 1 ? <div className={\"arrows\"}><Arrow /></div> : \"\"}\r\n                </React.Fragment>\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nexport default Blockchain;","import React from 'react';\r\nimport { logElem } from '../../Utils/Interfaces';\r\nimport \"../UpperList/UpperList.scss\";\r\nimport \"./LogList.scss\";\r\n\r\ninterface LogListProps {\r\n    logs: logElem[]\r\n    logsVisible: boolean\r\n}\r\n\r\nclass LogList extends React.Component<LogListProps, {}> {\r\n    render() {\r\n        return <div id={\"logs\"} className={this.props.logsVisible ? \"visible\" : \"\"}>\r\n            <div id={\"logList\"}>\r\n                <table>\r\n                    <tbody>\r\n                        {this.props.logs.map((v, i) => {\r\n                            return <tr key={i}><td><samp>{v.time}</samp></td><td className={v.type}><samp>{v.message}</samp></td></tr>;\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default LogList;","import React from 'react';\r\nimport './App.scss';\r\nimport './Style/Buttons.scss';\r\nimport UpperList from \"./Components/UpperList/UpperList\";\r\nimport {\r\n    account,\r\n    block,\r\n    logElem,\r\n    signaturePair,\r\n    transaction,\r\n    validStartHash\r\n} from \"./Utils/Interfaces\";\r\nimport {\r\n    blockToString, generateAccount,\r\n    generateBlockHash, generateBlockHashFromString,\r\n    signTransaction,\r\n    verifyAllBlockTransactions\r\n} from \"./Utils/Functions\";\r\nimport Blockchain from \"./Components/Blockchain/Blockchain\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { showError, showWarning } from \"./Utils/ToastFunctions\";\r\nimport LogList from './Components/LogList/LogList';\r\n\r\ninterface AppProps {\r\n}\r\n\r\ninterface AppState {\r\n    accountIdCount: number,\r\n    accounts: account[],\r\n    transactionIdCount: number,\r\n    transactions: transaction[],\r\n    unusedTransactions: number[],\r\n    blockIdCount: number,\r\n    blocks: block[],\r\n    lastConfirmedBlock: number,\r\n    lastUnusedBlock: number,\r\n    logs: logElem[],\r\n    logsVisible: boolean\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n    constructor(props: AppProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            accountIdCount: 0,\r\n            accounts: [],\r\n            transactionIdCount: 0,\r\n            transactions: [],\r\n            unusedTransactions: [],\r\n            blockIdCount: 2,\r\n            blocks: [{\r\n                id: 0,\r\n                prevHash: validStartHash,\r\n                nonce: 0,\r\n                transactions: [],\r\n                confirmed: false\r\n            }, {\r\n                id: 1,\r\n                nonce: 0,\r\n                transactions: [],\r\n                confirmed: false\r\n            }],\r\n            lastConfirmedBlock: -1,\r\n            lastUnusedBlock: 1,\r\n            logs: [],\r\n            logsVisible: false\r\n        };\r\n\r\n        this.recalculateBlocks();\r\n    }\r\n\r\n    /**\r\n     * Creates a new account and appends it to the account-list\r\n     */\r\n    addAccount = (): void => {\r\n        let count = this.state.accountIdCount;\r\n        let a = generateAccount(count, this.state.lastConfirmedBlock);\r\n\r\n        let arr: account[] = this.state.accounts;\r\n        arr.push(a);\r\n        this.setState({ accounts: arr, accountIdCount: count + 1 }, () => {\r\n            this.addLog({\r\n                type: \"info\",\r\n                message: \"Added account \" + a.idString\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates a new transaction and appends it to the unused-transactions-list\r\n     */\r\n    addTransaction = (): void => {\r\n        let count = this.state.transactionIdCount;\r\n\r\n        let t: transaction = {\r\n            id: count,\r\n            idString: \"t\" + count,\r\n            signed: false,\r\n            editable: true\r\n        }\r\n\r\n        let arr: transaction[] = this.state.transactions;\r\n        let unusedArr: number[] = this.state.unusedTransactions;\r\n        arr.push(t);\r\n        unusedArr.push(t.id);\r\n        this.setState({ transactions: arr, unusedTransactions: unusedArr, transactionIdCount: count + 1 }, () => {\r\n            this.addLog({\r\n                type: \"info\",\r\n                message: \"Added transaction \" + t.idString\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Signs a transaction with the private key\r\n     * @param t transaction\r\n     */\r\n    signTransaction = (t: transaction) => {\r\n        if (this.state.accounts.length === 0) {\r\n            showError(\"At least one account is needed to set all transaction values!\");\r\n            this.addLog({\r\n                type: \"error\",\r\n                message: \"At least one account is needed to set all transaction values!\"\r\n            })\r\n            return;\r\n        }\r\n\r\n        if (t.from === undefined || t.to === undefined) {\r\n            showError(\"All values have to be set to sign a transaction!\");\r\n            this.addLog({\r\n                type: \"error\",\r\n                message: \"Transaction \" + t.id + \": All values have to be set to sign the transaction!\"\r\n            })\r\n            return;\r\n        }\r\n\r\n        let sender: number = t.from;\r\n\r\n        let privateKey = this.state.accounts[sender].privateKeyArray;\r\n        let address = this.state.accounts[sender].addressArray;\r\n\r\n        if (sender !== -1 && privateKey !== undefined && address !== undefined) {\r\n            let sig: signaturePair = signTransaction(t, privateKey);\r\n\r\n            let transactionArray = this.state.transactions;\r\n\r\n            transactionArray[t.id].signed = true;\r\n            transactionArray[t.id].signatureArray = sig.signatureArray;\r\n            transactionArray[t.id].signature = sig.signature;\r\n\r\n            this.setState({ transactions: transactionArray }, () => {\r\n                this.addLog({\r\n                    type: \"success\",\r\n                    message: \"Signed transaction \" + t.idString\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes signature of transaction\r\n     * @param id transactionId\r\n     */\r\n    removeSignature = (id: number) => {\r\n        let transactionArray: transaction[] = this.state.transactions;\r\n        let t: transaction = transactionArray[id];\r\n\r\n        if (t.signed) {\r\n            t.signed = false;\r\n            t.signatureArray = undefined;\r\n            t.signature = undefined;\r\n\r\n            transactionArray[id] = t;\r\n\r\n            this.setState({ transactions: transactionArray }, () => {\r\n                this.addLog({\r\n                    type: \"info\",\r\n                    message: \"Removed signature of transaction \" + t.idString + \" because some values changed\"\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates the hashes of every block and sets them to unconfirmed if previous hashes changed\r\n     */\r\n    recalculateBlocks = () => {\r\n        let blocks = [...this.state.blocks];\r\n        let transactions = [...this.state.transactions];\r\n        let nextId = this.state.blockIdCount;\r\n        let lastUnusedBlock = this.state.lastUnusedBlock;\r\n\r\n        // If the last block is confirmed or transactions are put into it, an empty block is appended to the list\r\n        if (blocks[blocks.length - 1].confirmed || blocks[blocks.length - 1].transactions.length !== 0) {\r\n            blocks.push({\r\n                id: nextId,\r\n                nonce: 0,\r\n                transactions: [],\r\n                confirmed: false\r\n            });\r\n            this.addLog({\r\n                type: \"info\",\r\n                message: \"Added new block\"\r\n            });\r\n            lastUnusedBlock = nextId;\r\n        }\r\n\r\n        let changed = false;\r\n        let lastConfirmed = this.state.lastConfirmedBlock;\r\n\r\n        for (let i = 0; i < blocks.length; i++) {\r\n            let hash = generateBlockHash(blocks[i], transactions);\r\n            if (hash === \"\") {\r\n                console.log(\"Error while generating hash, see previous error-messages!\");\r\n                return;\r\n            }\r\n            if (hash !== blocks[i].hash) {\r\n                if (!changed && lastConfirmed > i - 1) {\r\n                    lastConfirmed = i - 1;\r\n                    this.addLog({\r\n                        type: \"warning\",\r\n                        message: \"Hash of block \" + i + \" changed, all following blocks are set to unconfirmed\"\r\n                    })\r\n                }\r\n\r\n                changed = true;\r\n            }\r\n            if (changed) {\r\n                blocks[i].confirmed = false;\r\n            }\r\n\r\n            blocks[i].hash = hash;\r\n            if (i !== blocks.length - 1) {\r\n                blocks[i + 1].prevHash = hash;\r\n            }\r\n        }\r\n\r\n        this.setState({ blocks: blocks, lastUnusedBlock: lastUnusedBlock, lastConfirmedBlock: lastConfirmed, blockIdCount: lastUnusedBlock+1 });\r\n    }\r\n\r\n    confirmBlock = (id: number) => {\r\n        let blocks = [...this.state.blocks];\r\n        let transactions = [...this.state.transactions];\r\n        let accounts = [...this.state.accounts];\r\n\r\n        if (id !== 0 && !blocks[id - 1].confirmed) {\r\n            showWarning(\"All previous blocks need to be confirmed first!\");\r\n            this.addLog({\r\n                type: \"error\",\r\n                message: \"All previous blocks need to be confirmed first!\"\r\n            })\r\n            return;\r\n        }\r\n\r\n        let transactionsValidated = verifyAllBlockTransactions(blocks[id], transactions, accounts);\r\n\r\n        if (!transactionsValidated) {\r\n            showError(\"Some transactions could not be verified!\");\r\n            this.addLog({\r\n                type: \"error\",\r\n                message: \"Some transactions in block \" + id + \" could not be verified!\"\r\n            })\r\n            return;\r\n        }\r\n        this.addLog({\r\n            type: \"info\",\r\n            message: \"All transactions in block \" + id + \" have valid signatures\"\r\n        })\r\n\r\n        let balancesAfterBlock: number[] = [];\r\n        for (let i = 0; i < accounts.length; i++) {\r\n            balancesAfterBlock[i] = accounts[i].balanceBeforeBlock[id];\r\n        }\r\n\r\n        for (let i = 0; i < blocks[id].transactions.length; i++) {\r\n            let t = transactions[blocks[id].transactions[i]];\r\n\r\n            if (t.from === undefined || t.to === undefined || t.amount === undefined) return;\r\n\r\n            let newFromValue = balancesAfterBlock[t.from] - t.amount;\r\n            if (newFromValue < 0) {\r\n                showError(\"Transaction \" + t.idString + \" could not be confirmed, account \" + t.from + \" doesn't have enough balance for this transaction!\");\r\n                this.addLog({\r\n                    type: \"error\",\r\n                    message: \"Transaction \" + t.idString + \" could not be confirmed, account \" + t.from + \" doesn't have enough balance for this transaction!\"\r\n                })\r\n                for (let j = 0; j < accounts.length; j++) {\r\n                    accounts[j].balanceBeforeBlock = accounts[j].balanceBeforeBlock.slice(0, id + 1);\r\n                }\r\n                this.setState({ accounts: accounts });\r\n                return;\r\n            }\r\n\r\n            balancesAfterBlock[t.from] = balancesAfterBlock[t.from] - t.amount;\r\n            balancesAfterBlock[t.to] = balancesAfterBlock[t.to] + t.amount;\r\n        }\r\n\r\n        for (let i = 0; i < accounts.length; i++) {\r\n            accounts[i].balanceBeforeBlock[id + 1] = balancesAfterBlock[i];\r\n        }\r\n\r\n        let hash = \"\";\r\n        let block = blocks[id];\r\n        let nonce = -1;\r\n\r\n        let blockString = blockToString(block, transactions);\r\n\r\n        let iterations = 1000000;\r\n\r\n        let startTime = performance.now();\r\n        do {\r\n            nonce++;\r\n            hash = generateBlockHashFromString(blockString, nonce);\r\n        } while (!hash.startsWith(validStartHash) && nonce < iterations)\r\n        let endTime = performance.now();\r\n\r\n        if (nonce >= iterations && !hash.startsWith(validStartHash)) {\r\n            showError(\"Could not validate block!\");\r\n            this.addLog({\r\n                type: \"error\",\r\n                message: \"Didn't find a valid nonce in \" + iterations + \" iterations!\"\r\n            })\r\n            return;\r\n        }\r\n\r\n        block.nonce = nonce;\r\n        block.confirmed = true;\r\n        block.hash = hash;\r\n        blocks[id] = block;\r\n\r\n        this.setState({ blocks: blocks, lastConfirmedBlock: block.id, accounts: accounts }, () => {\r\n            this.addLog({\r\n                type: \"success\",\r\n                message: \"Confirmed block \" + id + \" with nonce \" + nonce + \"; calculation time: \" + (endTime - startTime) + \"ms\"\r\n            })\r\n            this.recalculateBlocks();\r\n        });\r\n    }\r\n\r\n    onDragEnd = (result: any) => {\r\n        let { destination, source, draggableId } = result;\r\n\r\n        if (result.destination === null) return;\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n\r\n        let sourceIndex: number = result.source.index;\r\n        let destinationIndex: number = result.destination.index;\r\n        let transactionId: number = parseInt(draggableId.replace(\"transaction\", \"\"));\r\n\r\n        let transactionList = this.state.transactions;\r\n        let unusedTransactions = this.state.unusedTransactions;\r\n        let blocks = this.state.blocks;\r\n\r\n        if (result.destination.droppableId === \"transactionList\") {\r\n            if (result.source.droppableId === \"transactionList\") {\r\n                unusedTransactions.splice(sourceIndex, 1);\r\n                unusedTransactions.splice(destinationIndex, 0, transactionId);\r\n\r\n                this.setState({ unusedTransactions: unusedTransactions });\r\n            } else {\r\n                let source = result.source.droppableId.replace(\"block\", \"\");\r\n                let blockId = parseInt(source);\r\n\r\n                blocks[blockId].transactions.splice(sourceIndex, 1);\r\n\r\n                unusedTransactions.splice(destinationIndex, 0, transactionId);\r\n\r\n                transactionList[transactionId].editable = true;\r\n\r\n                this.setState({ blocks: blocks, unusedTransactions: unusedTransactions, transactions: transactionList });\r\n            }\r\n        } else {\r\n            if (result.source.droppableId === \"transactionList\") {\r\n                let transactionList = this.state.transactions;\r\n                if (!transactionList[transactionId].signed) {\r\n                    showError(\"Transaction must be signed to be included in a block!\");\r\n                    return;\r\n                }\r\n\r\n                unusedTransactions.splice(sourceIndex, 1);\r\n\r\n               // console.log(this.state.blocks);\r\n\r\n                let blockId = parseInt(result.destination.droppableId.replace(\"block\", \"\"));\r\n                //console.log(blockId);\r\n                let blockIndex = result.destination.index;\r\n                blocks[blockId].transactions.splice(blockIndex, 0, transactionId);\r\n\r\n                transactionList[transactionId].editable = false;\r\n\r\n                this.setState({ unusedTransactions: unusedTransactions, blocks: blocks, transactions: transactionList });\r\n            } else {\r\n                // Source and destination are blocks\r\n                let sourceBlockId = parseInt(result.source.droppableId.replace(\"block\", \"\"));\r\n                let destinationBlockId = parseInt(result.destination.droppableId.replace(\"block\", \"\"));\r\n\r\n                if (sourceBlockId === destinationBlockId) {\r\n                    let blocks = this.state.blocks;\r\n                    let transactions = blocks[sourceBlockId].transactions;\r\n\r\n                    transactions.splice(sourceIndex, 1);\r\n                    transactions.splice(destinationIndex, 0, transactionId);\r\n\r\n                    blocks[sourceBlockId].transactions = transactions;\r\n                    this.setState({ blocks: blocks });\r\n                } else {\r\n                    let sourceTransactions = blocks[sourceBlockId].transactions;\r\n                    sourceTransactions.splice(sourceIndex, 1);\r\n                    blocks[sourceBlockId].transactions = sourceTransactions;\r\n\r\n                    let destinationTransactions = blocks[destinationBlockId].transactions;\r\n                    destinationTransactions.splice(destinationIndex, 0, transactionId);\r\n                    blocks[destinationBlockId].transactions = destinationTransactions;\r\n\r\n                    this.setState({ blocks: blocks });\r\n                }\r\n            }\r\n        }\r\n\r\n        this.recalculateBlocks();\r\n    }\r\n\r\n    addLog = (log: logElem) => {\r\n        let date = new Date();\r\n        let h = date.getHours();\r\n        let m = date.getMinutes();\r\n        let s = date.getSeconds();\r\n        log.time = ((h < 10) ? (\"0\" + h) : h) + \":\" + ((m < 10) ? (\"0\" + m) : m) + \":\" + ((s < 10) ? (\"0\" + s) : s);\r\n\r\n        let logs = this.state.logs;\r\n        logs.push(log);\r\n        this.setState({ logs: logs });\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"App\">\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <div id={\"upperContent\"}>\r\n                    <UpperList\r\n                        title={\"accounts\"}\r\n                        accounts={this.state.accounts}\r\n                        droppableId={\"accountList\"}\r\n                        lastConfirmedBlock={this.state.lastConfirmedBlock}\r\n                        className={\"accountListContainer\"}\r\n                        addFunction={this.addAccount}\r\n                        emptyText={\"Add some accounts!\"}\r\n                        dropDisabled={true}\r\n                        addLogFunction={this.addLog}\r\n                    />\r\n                    <UpperList\r\n                        title={\"transactions\"}\r\n                        transactions={this.state.transactions}\r\n                        transactionOrder={this.state.unusedTransactions}\r\n                        numberOfAccounts={this.state.accountIdCount}\r\n                        className={\"transactionListContainer\"}\r\n                        droppableId={\"transactionList\"}\r\n                        addFunction={this.addTransaction}\r\n                        signFunction={this.signTransaction}\r\n                        removeSignatureFunction={this.removeSignature}\r\n                        addLogFunction={this.addLog}\r\n                    />\r\n                    <LogList\r\n                        logsVisible={this.state.logsVisible}\r\n                        logs={this.state.logs} />\r\n                </div>\r\n                <div id={\"lowerContent\"}>\r\n                    <Blockchain\r\n                        blocks={this.state.blocks}\r\n                        transactions={this.state.transactions}\r\n                        confirmFunction={this.confirmBlock}\r\n                        addLogFunction={this.addLog}\r\n                    />\r\n                </div>\r\n                <div id={\"footer\"}>\r\n                    <span><a href=\"https://github.com/nilslambertz/BlockchainDemo\" target=\"_blank\" rel=\"noreferrer\">source code</a></span>\r\n                    <span>by <a href=\"https://nilslambertz.github.io/\" target=\"_blank\" rel=\"noreferrer\">nils lambertz</a></span>\r\n                    <div className={\"logsToggle\"} onClick={() => {\r\n                        let curr = this.state.logsVisible;\r\n                        this.setState({ logsVisible: !curr });\r\n                    }\r\n                    }>Logs: <span>{this.state.logsVisible ? \"ON\" : \"OFF\"}</span></div>\r\n                </div></DragDropContext>\r\n            <ToastContainer />\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","export const validStartHash = \"0\".repeat(3);\r\nexport const maxInitialBalance = 1000;\r\n\r\nexport interface account {\r\n    id: number,\r\n    idString: string,\r\n    privateKey?: string,\r\n    privateKeyArray?: Uint8Array\r\n    address?: string,\r\n    addressArray?: Uint8Array\r\n    balanceBeforeBlock: number[]\r\n}\r\n\r\nexport interface transaction {\r\n    id: number,\r\n    idString: string,\r\n    from?: number,\r\n    to?: number,\r\n    amount?: number,\r\n    signed: boolean\r\n    signature?: string,\r\n    signatureArray?: Uint8Array\r\n    editable: boolean\r\n}\r\n\r\nexport interface keyAddressPair {\r\n    privateKey: string,\r\n    privateKeyArray?: Uint8Array\r\n    address: string,\r\n    addressArray: Uint8Array\r\n}\r\n\r\nexport interface signaturePair {\r\n    signature: string,\r\n    signatureArray: Uint8Array\r\n}\r\n\r\nexport interface block {\r\n    id: number,\r\n    prevHash?: string,\r\n    transactions: number[],\r\n    nonce?: number,\r\n    hash?: string,\r\n    confirmed: boolean\r\n}\r\n\r\nexport interface logElem {\r\n    time?: string,\r\n    type: \"error\" | \"warning\" | \"success\" | \"info\"\r\n    message: string\r\n}","import {account, block, keyAddressPair, maxInitialBalance, signaturePair, transaction} from \"./Interfaces\";\r\nimport nacl, {BoxKeyPair} from \"tweetnacl\";\r\nimport util from \"tweetnacl-util\";\r\nimport {encode} from \"@stablelib/utf8\";\r\nimport {sha256} from \"js-sha256\";\r\n\r\n/**\r\n * Returns hex-encoded String from array\r\n * @param array Array which should be converted to String\r\n */\r\nfunction getStringFromArray(array : Uint8Array) {\r\n    return Buffer.from(util.encodeBase64(array), \"base64\").toString(\"hex\");\r\n}\r\n\r\n/**\r\n * Returns Uint8Array from String\r\n * @param str String which should be converted to Array\r\n */\r\nfunction getArrayFromString(str : string) : Uint8Array {\r\n    return encode(str);\r\n}\r\n\r\n/**\r\n * Generates public-private-key pair and returns them\r\n * in hex-encoding and as Uint8-arrays\r\n */\r\nexport function generateKeyAddressPair() : keyAddressPair {\r\n    let pair : BoxKeyPair = nacl.sign.keyPair();\r\n\r\n    let privateKey = getStringFromArray(pair.secretKey);\r\n    let address = getStringFromArray(pair.publicKey);\r\n\r\n    return {\r\n        privateKey: privateKey,\r\n        privateKeyArray: pair.secretKey,\r\n        address: address,\r\n        addressArray: pair.publicKey\r\n    }\r\n}\r\n\r\n/**\r\n * Signs transaction and returns signature in hex-encoding and as Uint8-arrays\r\n * @param t Transaction to be signed\r\n * @param privateKeyArray Private key to sign the transaction\r\n */\r\nexport function signTransaction(t : transaction, privateKeyArray : Uint8Array) : signaturePair {\r\n    let message : string = transactionToString(t);\r\n    let messageArr = getArrayFromString(message);\r\n\r\n    let sig : Uint8Array = nacl.sign.detached(messageArr, privateKeyArray);\r\n\r\n    return {\r\n        signature: getStringFromArray(sig),\r\n        signatureArray: sig\r\n    };\r\n}\r\n\r\n/**\r\n * Verifies a given transaction and returns whether the transaction is signed with the correct key\r\n * @param t Transaction to be verified\r\n * @param signatureArray Uint8Array of signature\r\n * @param addressArray Uint8Array of address (public key)\r\n */\r\nexport function verifyTransaction(t: transaction, signatureArray : Uint8Array, addressArray : Uint8Array) : boolean {\r\n    let message : string = transactionToString(t);\r\n    let messageArr = getArrayFromString(message);\r\n\r\n    return nacl.sign.detached.verify(messageArr, signatureArray, addressArray);\r\n}\r\n\r\n/**\r\n * Verifies all transactions in a given block\r\n * @param b Block\r\n * @param transactions Array of all transactions\r\n * @param accounts Array of all accounts\r\n */\r\nexport function verifyAllBlockTransactions(b : block, transactions: transaction[], accounts: account[]) : boolean {\r\n    for(let i = 0; i < b.transactions.length; i++) {\r\n        let t = transactions[b.transactions[i]];\r\n        if (t.from !== undefined) {\r\n            let account = accounts[t.from];\r\n\r\n            if (t.signatureArray !== undefined && account.addressArray !== undefined) {\r\n                let verified = verifyTransaction(t, t.signatureArray, account.addressArray);\r\n                if (!verified) {\r\n                    console.log(\"Error in block \" + t.id + \": Signature in transaction \" + t.id + \" could not be verified!\");\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Generates hash for a block\r\n * @param b Block to be hashed\r\n * @param transactions Array of all transactions\r\n */\r\nexport function generateBlockHash(b : block, transactions: transaction[]) : string {\r\n    if(b.nonce === undefined) return \"\";\r\n\r\n    let blockString = blockToString(b, transactions);\r\n    return generateBlockHashFromString(blockString, b.nonce);\r\n}\r\n\r\n/**\r\n * Generates hash for a block in string format\r\n * @param blockString String-representation of a block\r\n * @param nonce Nonce for that block\r\n */\r\nexport function generateBlockHashFromString(blockString : string, nonce : number) {\r\n    return sha256(blockString + nonce);\r\n}\r\n\r\n/**\r\n * Returns string of a given block which includes the\r\n * previous hash and all transactions\r\n * @param b Block\r\n * @param transactions Array of all transactions\r\n */\r\nexport function blockToString(b : block, transactions: transaction[]) : string {\r\n    let transactionArray = [];\r\n    for(let i = 0; i < b.transactions.length; i++) {\r\n        let t = transactions[b.transactions[i]];\r\n        transactionArray.push(transactionToString(t));\r\n    }\r\n\r\n    let obj = {\r\n        prevHash: b.prevHash,\r\n        transactions: transactionArray\r\n    }\r\n\r\n    return JSON.stringify(obj);\r\n}\r\n\r\n/**\r\n * Returns string of a given transaction which includes\r\n * the id, the sender, the receiver and the amount\r\n * @param t Transaction\r\n */\r\nfunction transactionToString(t :transaction) : string {\r\n    let obj = {\r\n        id: t.id,\r\n        from: t.from,\r\n        to: t.to,\r\n        amount: t.amount\r\n    }\r\n\r\n    return JSON.stringify(obj);\r\n}\r\n\r\nexport function generateAccount(id: number, lastConfirmedBlock : number): account {\r\n    let keys = generateKeyAddressPair();\r\n    let balance = Math.floor(Math.random() * (maxInitialBalance + 1));\r\n\r\n    return {\r\n        id: id,\r\n        idString: \"a\" + id,\r\n        privateKey: keys.privateKey,\r\n        privateKeyArray: keys.privateKeyArray,\r\n        address: keys.address,\r\n        addressArray: keys.addressArray,\r\n        balanceBeforeBlock: Array(lastConfirmedBlock + 2).fill(balance)\r\n    }\r\n}"],"sourceRoot":""}