{"version":3,"sources":["Components/Account/Account.tsx","Utils/ToastFunctions.ts","res/arrowright.svg","Components/Transaction/Transaction.tsx","Components/UpperList/UpperList.tsx","Utils/Interfaces.ts","Components/Blockchain/Block.tsx","Components/Blockchain/Blockchain.tsx","Components/LogList/LogList.tsx","App.tsx","index.tsx","Utils/Functions.ts"],"names":["Account","className","this","props","account","id","privateKey","address","balanceBeforeBlock","lastConfirmedBlock","React","Component","warnStyle","backgroundColor","options","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","style","showError","msg","toast","error","_g","Transaction","state","from","to","amount","sign","t","transaction","signFunction","addLogFunction","type","message","setState","draggableId","index","provided","snapshot","isDragging","ref","innerRef","draggableProps","dragHandleProps","editable","value","onChange","v","newValue","parseInt","target","removeSignatureFunction","Array","numberOfAccounts","keys","map","x","min","max","event","val","isNaN","signed","signature","onClick","UpperList","printAccountList","accounts","length","color","emptyText","array","printTransactionList","transactions","transactionOrder","printFunction","err","arg","addFunction","console","log","blockList","title","droppableId","isDropDisabled","dropDisabled","droppableProps","isDraggingOver","placeholder","validStartHash","repeat","Block","block","confirmFunction","prevHash","nonce","confirmed","hash","substr","_excluded","_extends","Object","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgArrowright","_ref","svgRef","titleId","xmlns","enableBackground","xmlSpace","viewBox","y","y2","x1","x2","stroke","strokeMiterlimit","y1","strokeWidth","points","fill","ForwardRef","Blockchain","printBlocks","blocks","Fragment","LogList","logsVisible","logs","a","fontWeight","time","App","addAccount","generateKeyAddressPair","count","accountIdCount","balance","Math","floor","random","privateKeyArray","addressArray","arr","push","addLog","addTransaction","transactionIdCount","unusedArr","unusedTransactions","signTransaction","sender","sig","transactionArray","signatureArray","removeSignature","recalculateBlocks","lastUnused","lastUnusedBlock","nextId","blockIdCount","changed","lastConfirmed","generateBlockHash","confirmBlock","warn","verifyAllBlockTransactions","balancesAfterBlock","j","slice","blockString","blockToString","iterations","generateBlockHashFromString","startsWith","onDragEnd","result","destination","sourceIndex","destinationIndex","transactionId","replace","transactionList","splice","blockId","blockIndex","sourceBlockId","destinationBlockId","sourceTransactions","destinationTransactions","date","Date","h","getHours","m","getMinutes","s","getSeconds","curr","ReactDOM","render","StrictMode","document","getElementById","getStringFromArray","Buffer","util","encodeBase64","toString","getArrayFromString","str","encode","pair","nacl","keyPair","secretKey","publicKey","messageArr","transactionToString","detached","verifyTransaction","verify","b","sha256","obj","JSON","stringify"],"mappings":"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","file":"static/js/main.a87fa8bc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { account } from \"../../Utils/Interfaces\";\r\nimport \"./Account.scss\"\r\nimport \"../UpperList/UpperList.scss\"\r\n\r\ninterface AccountProps {\r\n    account: account,\r\n    lastConfirmedBlock: number\r\n}\r\n\r\nclass Account extends React.Component<AccountProps, {}> {\r\n    render() {\r\n        return <div className={\"account listElement\"}>\r\n            <table className={\"accountTable listTable\"}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td className={\"id\"}>{this.props.account.id}</td>\r\n                        <td className={\"privateKey smallText\"}>{this.props.account.privateKey}</td>\r\n                        <td className={\"address smallText\"}>{this.props.account.address}</td>\r\n                        <td className={\"balance\"}>{this.props.account.balanceBeforeBlock[this.props.lastConfirmedBlock + 1]}</td>\r\n                    </tr>\r\n                    <tr className={\"description\"}>\r\n                        <td>ID</td>\r\n                        <td>Private Key</td>\r\n                        <td>Address</td>\r\n                        <td>Balance</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default Account;","import {toast, ToastOptions} from \"react-toastify\";\r\n\r\nconst warnStyle = {\r\n    backgroundColor: \"#FF5226\"\r\n}\r\n\r\nconst options : ToastOptions = {\r\n    position: \"top-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: false,\r\n    progress: undefined,\r\n    style: warnStyle\r\n}\r\n\r\nexport function showError(msg: string) : void {\r\n    toast.error(msg, options);\r\n}\r\n\r\nexport function showWarning(msg: string) : void {\r\n    toast.warn(msg, {...options, style: warnStyle});\r\n}","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgArrowright(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    id: \"Layer_1\",\n    enableBackground: \"new 0 0 150 50\",\n    xmlSpace: \"preserve\",\n    viewBox: \"0 0 150 50\",\n    y: \"0px\",\n    x: \"0px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"line\", {\n    y2: 24.704,\n    x1: 1.266,\n    x2: 125.3,\n    stroke: \"white\",\n    strokeMiterlimit: 10,\n    y1: 24.704,\n    strokeWidth: 6\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"124.4 6.284 124.4 44.606 148.35 23.69\",\n    stroke: \"white\",\n    fill: \"white\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowright);\nexport default __webpack_public_path__ + \"static/media/arrowright.8349a54a.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport { transaction } from \"../../Utils/Interfaces\";\r\nimport \"./Transaction.scss\"\r\nimport \"../UpperList/UpperList.scss\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { showError } from \"../../Utils/ToastFunctions\";\r\n\r\ninterface TransactionProps {\r\n    transaction: transaction,\r\n    numberOfAccounts: number,\r\n    signFunction: any,\r\n    removeSignatureFunction: any,\r\n    index: number,\r\n    addLogFunction: any\r\n}\r\n\r\ninterface transactionState {\r\n    from: number,\r\n    to: number\r\n    amount: number\r\n}\r\n\r\nclass Transaction extends React.Component<TransactionProps, {}> {\r\n    componentDidMount() {\r\n        let t = this.props.transaction;\r\n        if (t.from !== undefined && t.to !== undefined && t.amount !== undefined) {\r\n            this.setState({\r\n                from: t.from,\r\n                to: t.to,\r\n                amount: t.amount,\r\n            });\r\n        }\r\n    }\r\n\r\n    state: transactionState = {\r\n        from: 0,\r\n        to: 0,\r\n        amount: 0\r\n    }\r\n\r\n    sign = () => {\r\n        if (this.state.from !== -1 && this.state.to !== -1 && this.state.amount !== -1) {\r\n            let t = this.props.transaction;\r\n            t.from = this.state.from;\r\n            t.to = this.state.to;\r\n            t.amount = this.state.amount\r\n\r\n            this.props.signFunction(t);\r\n        } else {\r\n            showError(\"All values must be set to sign a transaction!\");\r\n            this.props.addLogFunction({\r\n                type: \"error\",\r\n                message: \"Transaction \" + this.props.transaction.id + \": All values must be set to sign the transaction!\"\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return <Draggable draggableId={\"transaction\" + this.props.transaction.id} index={this.props.index}>\r\n            {(provided, snapshot) => (\r\n                <div className={\"transaction listElement\" + (snapshot.isDragging ? \" transactionDragging\" : \"\")}\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                >\r\n                    <table className={\"transactionTable listTable\"}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td className={\"id\"}>{this.props.transaction.id}</td>\r\n                                <td className={\"from\" + (!this.props.transaction.editable ? \" biggerText\" : \"\")}>\r\n                                    {\r\n                                        this.props.transaction.editable ?\r\n                                            <select className={\"selectStyle\"}\r\n                                                value={this.state.from}\r\n                                                onChange={(v) => {\r\n                                                    let newValue = parseInt(v.target.value);\r\n                                                    if (this.state.from !== newValue) {\r\n                                                        this.props.removeSignatureFunction(this.props.transaction.id);\r\n                                                        this.setState({ from: newValue });\r\n                                                    }\r\n                                                }}>\r\n                                                {\r\n                                                    Array.from(Array(this.props.numberOfAccounts).keys()).map(x => {\r\n                                                        return <option value={x} key={x}>{x}</option>\r\n                                                    })}\r\n                                            </select>\r\n                                            :\r\n                                            this.props.transaction.from\r\n                                    }\r\n                                </td>\r\n                                <td className={\"to\" + (!this.props.transaction.editable ? \" biggerText\" : \"\")}>\r\n                                    {\r\n                                        this.props.transaction.editable ?\r\n                                            <select className={\"selectStyle\"}\r\n                                                value={this.state.to}\r\n                                                onChange={(v) => {\r\n                                                    let newValue = parseInt(v.target.value);\r\n                                                    if (this.state.to !== newValue) {\r\n                                                        this.props.removeSignatureFunction(this.props.transaction.id);\r\n                                                        this.setState({ to: newValue });\r\n                                                    }\r\n                                                }}>\r\n                                                {\r\n                                                    Array.from(Array(this.props.numberOfAccounts).keys()).map(x => {\r\n                                                        return <option value={x} key={x}>{x}</option>\r\n                                                    })}\r\n                                            </select>\r\n                                            :\r\n                                            this.props.transaction.to\r\n                                    }\r\n                                </td>\r\n                                <td className={\"amount\"}>\r\n                                    {\r\n                                        this.props.transaction.editable ?\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                className={\"amountInput\"}\r\n                                                min=\"0\"\r\n                                                max=\"1000\"\r\n                                                value={this.state.amount}\r\n                                                onChange={(event) => {\r\n                                                    let val = parseInt(event.target.value);\r\n\r\n                                                    if (!isNaN(val)) {\r\n                                                        let oldValue = this.state.amount;\r\n                                                        if (oldValue !== val) {\r\n                                                            this.props.removeSignatureFunction(this.props.transaction.id);\r\n                                                        }\r\n\r\n                                                        this.setState({ amount: val });\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                            :\r\n                                            this.props.transaction.amount\r\n                                    }\r\n                                </td>\r\n                                <td className={\"signature\" + (this.props.transaction.signed ? \" smallText\" : \"\")}>\r\n                                    {\r\n                                        this.props.transaction.signed ?\r\n                                            this.props.transaction.signature\r\n                                            :\r\n                                            <div className={\"signButton\"} onClick={() => this.sign()}>Sign</div>\r\n                                    }\r\n                                </td>\r\n                            </tr>\r\n                            <tr className={\"description\"}>\r\n                                <td>ID</td>\r\n                                <td>From</td>\r\n                                <td>To</td>\r\n                                <td>Amount</td>\r\n                                <td>Signature</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )}\r\n        </Draggable>;\r\n    }\r\n}\r\n\r\nexport default Transaction;","import React from 'react';\r\nimport './UpperList.scss';\r\nimport { account, transaction } from \"../../Utils/Interfaces\";\r\nimport Account from \"../Account/Account\";\r\nimport Transaction from \"../Transaction/Transaction\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\n\r\ninterface UpperListProps {\r\n    title: string;\r\n    accounts?: account[],\r\n    transactions?: transaction[],\r\n    transactionOrder?: number[],\r\n    numberOfAccounts?: number,\r\n    className?: string\r\n    addFunction?: any\r\n    signFunction?: any,\r\n    removeSignatureFunction?: any,\r\n    blockList?: boolean,\r\n    droppableId: string,\r\n    dropDisabled?: boolean,\r\n    lastConfirmedBlock?: number,\r\n    emptyText?: string,\r\n    addLogFunction: any\r\n}\r\n\r\nclass UpperList extends React.Component<UpperListProps, {}> {\r\n    render() {\r\n        let printFunction: any = (err: any) => { return <div className={\"listError\"}>{err}</div> };\r\n        let arg: any = \"Error\";\r\n        if (this.props.accounts) {\r\n            printFunction = this.printAccountList;\r\n            arg = this.props.accounts;\r\n        } else if (this.props.transactions) {\r\n            printFunction = this.printTransactionList;\r\n            arg = this.props.transactions\r\n        }\r\n\r\n        let addFunction = this.props.addFunction;\r\n        if (!addFunction) addFunction = () => { console.log(\"Error: function is not defined\") };\r\n\r\n        return (<div className={\"upperListContainer \" + this.props.className}>\r\n            {\r\n                this.props.blockList ?\r\n                    \"\"\r\n                    :\r\n                    <div className={\"upperListTitle\"}>{this.props.title}</div>\r\n\r\n            }\r\n            <Droppable droppableId={this.props.droppableId} isDropDisabled={this.props.dropDisabled}>\r\n                {(provided, snapshot) => (\r\n                    <div ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                        className={\"upperList\"}\r\n                        style={{ backgroundColor: snapshot.isDraggingOver ? \"rgba(255,255,255,0.05)\" : \"\" }}\r\n                    >\r\n                        {printFunction(arg)}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}</Droppable>\r\n            {\r\n                this.props.blockList ?\r\n                    \"\"\r\n                    :\r\n                    <div className={\"addButtonContainer\"}>\r\n                        <div className={\"addButton\"} onClick={() => addFunction()}>\r\n                            Add\r\n                        </div>\r\n                    </div>\r\n            }\r\n        </div>);\r\n    }\r\n\r\n    printAccountList = (accounts: account[]) => {\r\n        let lastConfirmedBlock = this.props.lastConfirmedBlock ?? -1;\r\n\r\n        if (accounts.length === 0) {\r\n            return <div style={{ color: \"#575757\" }}>{this.props.emptyText}</div>\r\n        }\r\n\r\n        return accounts.map(function (value, index, array) {\r\n            return <Account account={value} key={value.id} lastConfirmedBlock={lastConfirmedBlock} />;\r\n        });\r\n    }\r\n\r\n    printTransactionList = (transactions: transaction[]) => {\r\n        let numberOfAccounts = 0;\r\n        if (this.props?.numberOfAccounts) {\r\n            numberOfAccounts = this.props.numberOfAccounts\r\n        }\r\n        let transactionOrder = this.props.transactionOrder;\r\n        if (transactionOrder === undefined) transactionOrder = [];\r\n        let signFunction = this.props.signFunction;\r\n        let removeSignatureFunction = this.props.removeSignatureFunction;\r\n\r\n        if (transactionOrder.length === 0) {\r\n            return <div style={{ color: \"#575757\" }}>{this.props.emptyText}</div>\r\n        }\r\n\r\n        let addLogFunction = this.props.addLogFunction;\r\n\r\n        return (transactionOrder.map(function (value, index, array) {\r\n            return <Transaction transaction={transactions[value]} numberOfAccounts={numberOfAccounts} key={value}\r\n                signFunction={signFunction} removeSignatureFunction={removeSignatureFunction} index={index} addLogFunction={addLogFunction} />\r\n        }));\r\n    }\r\n}\r\n\r\nexport default UpperList;","export const validStartHash = \"0\".repeat(3);\r\n\r\nexport interface account {\r\n    id: number,\r\n    privateKey?: string,\r\n    privateKeyArray?: Uint8Array\r\n    address?: string,\r\n    addressArray?: Uint8Array\r\n    balanceBeforeBlock: number[]\r\n}\r\n\r\nexport interface transaction {\r\n    id: number,\r\n    from?: number,\r\n    to?: number,\r\n    amount?: number,\r\n    signed: boolean\r\n    signature?: string,\r\n    signatureArray?: Uint8Array\r\n    editable: boolean\r\n}\r\n\r\nexport interface keyAddressPair {\r\n    privateKey: string,\r\n    privateKeyArray?: Uint8Array\r\n    address: string,\r\n    addressArray: Uint8Array\r\n}\r\n\r\nexport interface signaturePair {\r\n    signature: string,\r\n    signatureArray: Uint8Array\r\n}\r\n\r\nexport interface block {\r\n    id: number,\r\n    prevHash?: string,\r\n    transactions: number[],\r\n    nonce?: number,\r\n    hash?: string,\r\n    confirmed: boolean\r\n}\r\n\r\nexport interface logElem {\r\n    time?: string,\r\n    type: \"error\" | \"warning\" | \"success\" | \"info\"\r\n    message: string\r\n}","import React from 'react';\r\nimport \"./Blockchain.scss\";\r\nimport { block, transaction, validStartHash } from \"../../Utils/Interfaces\";\r\nimport UpperList from \"../UpperList/UpperList\";\r\n\r\ninterface BlockProps {\r\n    block: block,\r\n    transactions: transaction[],\r\n    confirmFunction: any,\r\n    addLogFunction: any\r\n}\r\n\r\nclass Block extends React.Component<BlockProps, {}> {\r\n    printTransactionList = () => {\r\n        return <UpperList\r\n            droppableId={\"block\" + this.props.block.id}\r\n            title={\"transactions\"}\r\n            transactions={this.props.transactions}\r\n            transactionOrder={this.props.block.transactions}\r\n            className={\"transactionListContainer\"}\r\n            emptyText={\"Drag and drop transactions here!\"}\r\n            blockList={true}\r\n            addLogFunction={this.props.addLogFunction} />\r\n    }\r\n\r\n    confirmFunction = () => {\r\n        this.props.confirmFunction(this.props.block.id);\r\n    }\r\n\r\n    render() {\r\n        return <div className={\"blockContainer\"}>\r\n            <div className={\"block\"}>\r\n                <div className={\"prevHash blockSmallText\"}>\r\n                    {this.props.block?.prevHash}\r\n                    <div className={\"blockDescription\"}>Previous hash</div>\r\n                </div>\r\n                <div className={\"transactions\"}>\r\n                    <div className={\"transactionList\"}>\r\n                        {this.printTransactionList()}\r\n                    </div>\r\n                    <div className={\"blockDescription\"}>Transactions</div>\r\n                </div>\r\n                <div className={\"nonce\"}>\r\n                    {this.props.block?.nonce}\r\n                    <div className={\"blockDescription\"}>Nonce</div>\r\n                </div>\r\n                <div className={\"confirmContainer\"}>\r\n                    {\r\n                        this.props.block.confirmed ?\r\n                            <span className={\"confirmedString\"}>confirmed</span>\r\n                            :\r\n                            <div className={\"confirmButton\"} onClick={() => this.confirmFunction()}>\r\n                                Confirm\r\n                            </div>\r\n                    }\r\n                    <div className={\"blockDescription\"}>Confirmation</div>\r\n                </div>\r\n                <div className={\"hash blockSmallText\"}>\r\n                    {\r\n                        this.props.block.confirmed ?\r\n                            <span>\r\n                                <span className={\"confirmedString\"}>{validStartHash}</span>\r\n                                {this.props.block?.hash?.substr(validStartHash.length)}\r\n                            </span>\r\n                            :\r\n                            this.props.block?.hash\r\n                    }\r\n                    <div className={\"blockDescription\"}>Hash</div>\r\n                </div>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default Block;","import React from 'react';\r\nimport \"./Blockchain.scss\";\r\nimport { block, transaction } from \"../../Utils/Interfaces\";\r\nimport Block from \"./Block\";\r\nimport { ReactComponent as Arrow } from \"../../res/arrowright.svg\";\r\n\r\ninterface BlockchainProps {\r\n    blocks: block[],\r\n    transactions: transaction[],\r\n    confirmFunction: any,\r\n    addLogFunction: any\r\n}\r\n\r\nclass Blockchain extends React.Component<BlockchainProps, {}> {\r\n    render() {\r\n        return <div className={\"blockchain\"}>\r\n            {this.printBlocks()}\r\n        </div>;\r\n    }\r\n    printBlocks = () => {\r\n        let transactions = this.props.transactions;\r\n        let confirmFunction = this.props.confirmFunction;\r\n        let addLogFunction = this.props.addLogFunction;\r\n\r\n        return this.props.blocks.map(function (value, index, array) {\r\n            return (\r\n                <React.Fragment key={index}>\r\n                    <Block\r\n                        block={value}\r\n                        transactions={transactions}\r\n                        confirmFunction={confirmFunction}\r\n                        addLogFunction={addLogFunction}\r\n                    />\r\n                    {index !== array.length - 1 ? <div className={\"arrows\"}><Arrow /></div> : \"\"}\r\n                </React.Fragment>\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nexport default Blockchain;","import React from 'react';\r\nimport { logElem } from '../../Utils/Interfaces';\r\nimport \"../UpperList/UpperList.scss\";\r\nimport \"./LogList.scss\";\r\n\r\ninterface LogListProps {\r\n    logs: logElem[]\r\n    logsVisible: boolean\r\n}\r\n\r\nclass LogList extends React.Component<LogListProps, {}> {\r\n    render() {\r\n        return <div id={\"logs\"} className={this.props.logsVisible ? \"visible\" : \"\"}>\r\n            <div id={\"logList\"}>\r\n                {this.props.logs.map((v, i, a) => {\r\n                    return <div key={i} className={v.type}><span style={{ color: \"white\", fontWeight: \"bold\" }}>{v.time}</span> {v.message}</div>\r\n                })}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default LogList;","import React from 'react';\nimport './App.scss';\nimport UpperList from \"./Components/UpperList/UpperList\";\nimport { account, block, logElem, signaturePair, transaction, validStartHash } from \"./Utils/Interfaces\";\nimport {\n    blockToString,\n    generateBlockHash, generateBlockHashFromString,\n    generateKeyAddressPair,\n    signTransaction,\n    verifyAllBlockTransactions\n} from \"./Utils/Functions\";\nimport Blockchain from \"./Components/Blockchain/Blockchain\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { showError, showWarning } from \"./Utils/ToastFunctions\";\nimport LogList from './Components/LogList/LogList';\n\ninterface AppProps {\n}\n\ninterface AppState {\n    accountIdCount: number,\n    accounts: account[],\n    transactionIdCount: number,\n    transactions: transaction[],\n    unusedTransactions: number[],\n    blockIdCount: number,\n    blocks: block[],\n    lastConfirmedBlock: number,\n    lastUnusedBlock: number,\n    logs: logElem[],\n    logsVisible: boolean\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n\n        this.state = {\n            accountIdCount: 0,\n            accounts: [],\n            transactionIdCount: 0,\n            transactions: [],\n            unusedTransactions: [],\n            blockIdCount: 2,\n            blocks: [{\n                id: 0,\n                prevHash: validStartHash,\n                nonce: 0,\n                transactions: [],\n                confirmed: false\n            }, {\n                id: 1,\n                nonce: 0,\n                transactions: [],\n                confirmed: false\n            }],\n            lastConfirmedBlock: -1,\n            lastUnusedBlock: 1,\n            logs: [],\n            logsVisible: false\n        };\n\n        this.recalculateBlocks();\n    }\n\n    addAccount = (): void => {\n        let keys = generateKeyAddressPair();\n        let count = this.state.accountIdCount;\n\n        let balance = Math.floor(Math.random() * 1001);\n\n        let a: account = {\n            id: count,\n            privateKey: keys.privateKey,\n            privateKeyArray: keys.privateKeyArray,\n            address: keys.address,\n            addressArray: keys.addressArray,\n            balanceBeforeBlock: Array(this.state.lastConfirmedBlock + 2).fill(balance)\n        }\n\n        let arr: account[] = this.state.accounts;\n        arr.push(a);\n        this.setState({ accounts: arr, accountIdCount: count + 1 }, () => {\n            this.addLog({\n                type: \"info\",\n                message: \"Added account \" + a.id\n            })\n        });\n    }\n\n    addTransaction = (): void => {\n        let count = this.state.transactionIdCount;\n\n        let t: transaction = {\n            id: count,\n            signed: false,\n            editable: true\n        }\n\n        let arr: transaction[] = this.state.transactions;\n        let unusedArr: number[] = this.state.unusedTransactions;\n        arr.push(t);\n        unusedArr.push(t.id);\n        this.setState({ transactions: arr, unusedTransactions: unusedArr, transactionIdCount: count + 1 }, () => {\n            this.addLog({\n                type: \"info\",\n                message: \"Added transaction \" + t.id\n            })\n        });\n    }\n\n    signTransaction = (t: transaction) => {\n        if (this.state.accounts.length === 0) {\n            showError(\"At least one account is needed to set all transaction values!\");\n            this.addLog({\n                type: \"error\",\n                message: \"At least one account is needed to set all transaction values!\"\n            })\n            return;\n        }\n\n        if (t.from === undefined || t.to === undefined) {\n            showError(\"All values have to be set to sign a transaction!\");\n            this.addLog({\n                type: \"error\",\n                message: \"Transaction \" + t.id + \": All values have to be set to sign the transaction!\"\n            })\n            return;\n        }\n\n        let sender: number = t.from;\n\n        let privateKey = this.state.accounts[sender].privateKeyArray;\n        let address = this.state.accounts[sender].addressArray;\n\n        if (sender !== -1 && privateKey !== undefined && address !== undefined) {\n            let sig: signaturePair = signTransaction(t, privateKey);\n\n            let transactionArray = this.state.transactions;\n\n            transactionArray[t.id].signed = true;\n            transactionArray[t.id].signatureArray = sig.signatureArray;\n            transactionArray[t.id].signature = sig.signature;\n\n            this.setState({ transactions: transactionArray }, () => {\n                this.addLog({\n                    type: \"success\",\n                    message: \"Signed transaction \" + t.id\n                })\n            });\n        }\n    }\n\n    removeSignature = (id: number) => {\n        let transactionArray: transaction[] = this.state.transactions;\n        let t: transaction = transactionArray[id];\n\n        if (t.signed) {\n            t.signed = false;\n            t.signatureArray = undefined;\n            t.signature = undefined;\n\n            transactionArray[id] = t;\n\n            this.setState({ transactions: transactionArray }, () => {\n                this.addLog({\n                    type: \"info\",\n                    message: \"Removed signature of transaction \" + t.id + \" because some values changed\"\n                })\n            });\n        }\n    }\n\n    recalculateBlocks = () => {\n        let blocks = [...this.state.blocks];\n        let transactions = [...this.state.transactions];\n\n        let lastUnused = this.state.lastUnusedBlock;\n        let nextId = this.state.blockIdCount;\n        if (blocks[blocks.length - 1].confirmed || blocks[blocks.length - 1].transactions.length !== 0) {\n            blocks.push({\n                id: nextId,\n                nonce: 0,\n                transactions: [],\n                confirmed: false\n            });\n            this.addLog({\n                type: \"info\",\n                message: \"Added new block\"\n            })\n            lastUnused = nextId++;\n        }\n\n        let changed = false;\n        let lastConfirmed = this.state.lastConfirmedBlock;\n\n        for (let i = 0; i < blocks.length; i++) {\n            let hash = generateBlockHash(blocks[i], transactions);\n            if (hash === \"\") {\n                console.log(\"Error while generating hash, see previous error-messages!\");\n                return;\n            }\n            if (hash !== blocks[i].hash) {\n                if (!changed && lastConfirmed > i - 1) {\n                    lastConfirmed = i - 1;\n                    this.addLog({\n                        type: \"warning\",\n                        message: \"Hash of block \" + i + \" changed, all following blocks are set to unconfirmed\"\n                    })\n                }\n\n                changed = true;\n            }\n            if (changed) {\n                blocks[i].confirmed = false;\n            }\n\n            blocks[i].hash = hash;\n            if (i !== blocks.length - 1) {\n                blocks[i + 1].prevHash = hash;\n            }\n        }\n\n        this.setState({ blocks: blocks, lastUnusedBlock: lastUnused, lastConfirmedBlock: lastConfirmed, blockIdCount: nextId });\n    }\n\n    confirmBlock = (id: number) => {\n        let blocks = [...this.state.blocks];\n        let transactions = [...this.state.transactions];\n        let accounts = [...this.state.accounts];\n\n        if (id !== 0 && !blocks[id - 1].confirmed) {\n            showWarning(\"All previous blocks need to be confirmed first!\");\n            this.addLog({\n                type: \"error\",\n                message: \"All previous blocks need to be confirmed first!\"\n            })\n            return;\n        }\n\n        let transactionsValidated = verifyAllBlockTransactions(blocks[id], transactions, accounts);\n\n        if (!transactionsValidated) {\n            showError(\"Some transactions could not be verified!\");\n            this.addLog({\n                type: \"error\",\n                message: \"Some transactions in block \" + id + \" could not be verified!\"\n            })\n            return;\n        }\n        this.addLog({\n            type: \"info\",\n            message: \"All transactions in block \" + id + \" are valid\"\n        })\n\n        let balancesAfterBlock: number[] = [];\n        for (let i = 0; i < accounts.length; i++) {\n            balancesAfterBlock[i] = accounts[i].balanceBeforeBlock[id];\n        }\n\n        for (let i = 0; i < blocks[id].transactions.length; i++) {\n            let t = transactions[blocks[id].transactions[i]];\n\n            if (t.from === undefined || t.to === undefined || t.amount === undefined) return;\n\n            let newFromValue = balancesAfterBlock[t.from] - t.amount;\n            if (newFromValue < 0) {\n                showError(\"Transaction \" + t.id + \" could not be confirmed, account \" + t.from + \" doesn't have enough balance for this transaction!\");\n                this.addLog({\n                    type: \"error\",\n                    message: \"Transaction \" + t.id + \" could not be confirmed, account \" + t.from + \" doesn't have enough balance for this transaction!\"\n                })\n                for (let j = 0; j < accounts.length; j++) {\n                    accounts[j].balanceBeforeBlock = accounts[j].balanceBeforeBlock.slice(0, id + 1);\n                }\n                this.setState({ accounts: accounts });\n                return;\n            }\n\n            balancesAfterBlock[t.from] = balancesAfterBlock[t.from] - t.amount;\n            balancesAfterBlock[t.to] = balancesAfterBlock[t.to] + t.amount;\n        }\n\n        for (let i = 0; i < accounts.length; i++) {\n            accounts[i].balanceBeforeBlock[id + 1] = balancesAfterBlock[i];\n        }\n\n        let hash = \"\";\n        let block = blocks[id];\n        let nonce = -1;\n\n        let blockString = blockToString(block, transactions);\n\n        let iterations = 1000000;\n\n        do {\n            nonce++;\n            hash = generateBlockHashFromString(blockString, nonce);\n        } while (!hash.startsWith(validStartHash) && nonce < iterations)\n\n        if (nonce >= iterations && !hash.startsWith(validStartHash)) {\n            showError(\"Could not validate block!\");\n            this.addLog({\n                type: \"error\",\n                message: \"Didn't find a valid nonce in \" + iterations + \" iterations!\"\n            })\n            return;\n        }\n\n        block.nonce = nonce;\n        block.confirmed = true;\n        block.hash = hash;\n        blocks[id] = block;\n\n        this.setState({ blocks: blocks, lastConfirmedBlock: block.id, accounts: accounts }, () => {\n            this.addLog({\n                type: \"success\",\n                message: \"Confirmed block \" + id + \" with nonce \" + nonce\n            })\n            this.recalculateBlocks();\n        });\n    }\n\n    onDragEnd = (result: any) => {\n        let { destination, source, draggableId } = result;\n\n        if (result.destination === null) return;\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\n\n        let sourceIndex: number = result.source.index;\n        let destinationIndex: number = result.destination.index;\n        let transactionId: number = parseInt(draggableId.replace(\"transaction\", \"\"));\n\n        let transactionList = this.state.transactions;\n        let unusedTransactions = this.state.unusedTransactions;\n        let blocks = this.state.blocks;\n\n        if (result.destination.droppableId === \"transactionList\") {\n            if (result.source.droppableId === \"transactionList\") {\n                unusedTransactions.splice(sourceIndex, 1);\n                unusedTransactions.splice(destinationIndex, 0, transactionId);\n\n                this.setState({ unusedTransactions: unusedTransactions });\n            } else {\n                let source = result.source.droppableId.replace(\"block\", \"\");\n                let blockId = parseInt(source);\n\n                blocks[blockId].transactions.splice(sourceIndex, 1);\n\n                unusedTransactions.splice(destinationIndex, 0, transactionId);\n\n                transactionList[transactionId].editable = true;\n\n                this.setState({ blocks: blocks, unusedTransactions: unusedTransactions, transactions: transactionList });\n            }\n        } else {\n            if (result.source.droppableId === \"transactionList\") {\n                let transactionList = this.state.transactions;\n                if (!transactionList[transactionId].signed) {\n                    showError(\"Transaction must be signed to be included in a block!\");\n                    return;\n                }\n\n                unusedTransactions.splice(sourceIndex, 1);\n\n                let blockId = parseInt(result.destination.droppableId.replace(\"block\", \"\"));\n                let blockIndex = result.destination.index;\n                blocks[blockId].transactions.splice(blockIndex, 0, transactionId);\n\n                transactionList[transactionId].editable = false;\n\n                this.setState({ unusedTransactions: unusedTransactions, blocks: blocks, transactions: transactionList });\n            } else {\n                // Source and destination are blocks\n                let sourceBlockId = parseInt(result.source.droppableId.replace(\"block\", \"\"));\n                let destinationBlockId = parseInt(result.destination.droppableId.replace(\"block\", \"\"));\n\n                if (sourceBlockId === destinationBlockId) {\n                    let blocks = this.state.blocks;\n                    let transactions = blocks[sourceBlockId].transactions;\n\n                    transactions.splice(sourceIndex, 1);\n                    transactions.splice(destinationIndex, 0, transactionId);\n\n                    blocks[sourceBlockId].transactions = transactions;\n                    this.setState({ blocks: blocks });\n                } else {\n                    let sourceTransactions = blocks[sourceBlockId].transactions;\n                    sourceTransactions.splice(sourceIndex, 1);\n                    blocks[sourceBlockId].transactions = sourceTransactions;\n\n                    let destinationTransactions = blocks[destinationBlockId].transactions;\n                    destinationTransactions.splice(destinationIndex, 0, transactionId);\n                    blocks[destinationBlockId].transactions = destinationTransactions;\n\n                    this.setState({ blocks: blocks });\n                }\n            }\n        }\n\n        this.recalculateBlocks();\n    }\n\n    addLog = (log: logElem) => {\n        let date = new Date();\n        let h = date.getHours();\n        let m = date.getMinutes();\n        let s = date.getSeconds();\n        log.time = ((h < 10) ? (\"0\" + h) : h) + \":\" + ((m < 10) ? (\"0\" + m) : m) + \":\" + ((s < 10) ? (\"0\" + s) : s);\n\n        let logs = this.state.logs;\n        logs.push(log);\n        this.setState({ logs: logs });\n    }\n\n    render() {\n        return <div className=\"App\">\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <div id={\"upperContent\"}>\n                    <UpperList\n                        title={\"accounts\"}\n                        accounts={this.state.accounts}\n                        droppableId={\"accountList\"}\n                        lastConfirmedBlock={this.state.lastConfirmedBlock}\n                        className={\"accountListContainer\"}\n                        addFunction={this.addAccount}\n                        emptyText={\"Add some accounts!\"}\n                        dropDisabled={true}\n                        addLogFunction={this.addLog}\n                    />\n                    <UpperList\n                        title={\"transactions\"}\n                        transactions={this.state.transactions}\n                        transactionOrder={this.state.unusedTransactions}\n                        numberOfAccounts={this.state.accountIdCount}\n                        className={\"transactionListContainer\"}\n                        droppableId={\"transactionList\"}\n                        addFunction={this.addTransaction}\n                        signFunction={this.signTransaction}\n                        removeSignatureFunction={this.removeSignature}\n                        addLogFunction={this.addLog}\n                    />\n                    <LogList\n                        logsVisible={this.state.logsVisible}\n                        logs={this.state.logs} />\n                </div>\n                <div id={\"lowerContent\"}>\n                    <Blockchain\n                        blocks={this.state.blocks}\n                        transactions={this.state.transactions}\n                        confirmFunction={this.confirmBlock}\n                        addLogFunction={this.addLog}\n                    />\n                </div>\n                <div id={\"footer\"}>\n                    <span />\n                    <span>by nils lambertz</span>\n                    <div className={\"logsToggle\"} onClick={() => {\n                        let curr = this.state.logsVisible;\n                        this.setState({ logsVisible: !curr });\n                    }\n                    }>Logs: <span>{this.state.logsVisible ? \"ON\" : \"OFF\"}</span></div>\n                </div></DragDropContext>\n            <ToastContainer />\n        </div>;\n    };\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","import {account, block, keyAddressPair, signaturePair, transaction} from \"./Interfaces\";\r\nimport nacl, {BoxKeyPair} from \"tweetnacl\";\r\nimport util from \"tweetnacl-util\";\r\nimport {encode} from \"@stablelib/utf8\";\r\nimport {sha256} from \"js-sha256\";\r\n\r\n/**\r\n * Returns hex-encoded String from array\r\n * @param array Array which should be converted to String\r\n */\r\nfunction getStringFromArray(array : Uint8Array) {\r\n    return Buffer.from(util.encodeBase64(array), \"base64\").toString(\"hex\");\r\n}\r\n\r\n/**\r\n * Returns Uint8Array from String\r\n * @param str String which should be converted to Array\r\n */\r\nfunction getArrayFromString(str : string) : Uint8Array {\r\n    return encode(str);\r\n}\r\n\r\n/**\r\n * Generates public-private-key pair and returns them\r\n * in hex-encoding and as Uint8-arrays\r\n */\r\nexport function generateKeyAddressPair() : keyAddressPair {\r\n    let pair : BoxKeyPair = nacl.sign.keyPair();\r\n\r\n    let privateKey = getStringFromArray(pair.secretKey);\r\n    let address = getStringFromArray(pair.publicKey);\r\n\r\n    return {\r\n        privateKey: privateKey,\r\n        privateKeyArray: pair.secretKey,\r\n        address: address,\r\n        addressArray: pair.publicKey\r\n    }\r\n}\r\n\r\n/**\r\n * Signs transaction and returns signature in hex-encoding and as Uint8-arrays\r\n * @param t Transaction to be signed\r\n * @param privateKeyArray Private key to sign the transaction\r\n */\r\nexport function signTransaction(t : transaction, privateKeyArray : Uint8Array) : signaturePair {\r\n    let message : string = transactionToString(t);\r\n    let messageArr = getArrayFromString(message);\r\n\r\n    let sig : Uint8Array = nacl.sign.detached(messageArr, privateKeyArray);\r\n\r\n    return {\r\n        signature: getStringFromArray(sig),\r\n        signatureArray: sig\r\n    };\r\n}\r\n\r\n/**\r\n * Verifies a given transaction and returns whether the transaction is signed with the correct key\r\n * @param t Transaction to be verified\r\n * @param signatureArray Uint8Array of signature\r\n * @param addressArray Uint8Array of address (public key)\r\n */\r\nexport function verifyTransaction(t: transaction, signatureArray : Uint8Array, addressArray : Uint8Array) : boolean {\r\n    let message : string = transactionToString(t);\r\n    let messageArr = getArrayFromString(message);\r\n\r\n    return nacl.sign.detached.verify(messageArr, signatureArray, addressArray);\r\n}\r\n\r\n/**\r\n * Verifies all transactions in a given block\r\n * @param b Block\r\n * @param transactions Array of all transactions\r\n * @param accounts Array of all accounts\r\n */\r\nexport function verifyAllBlockTransactions(b : block, transactions: transaction[], accounts: account[]) : boolean {\r\n    for(let i = 0; i < b.transactions.length; i++) {\r\n        let t = transactions[b.transactions[i]];\r\n        if (t.from !== undefined) {\r\n            let account = accounts[t.from];\r\n\r\n            if (t.signatureArray !== undefined && account.addressArray !== undefined) {\r\n                let verified = verifyTransaction(t, t.signatureArray, account.addressArray);\r\n                if (!verified) {\r\n                    console.log(\"Error in block \" + t.id + \": Signature in transaction \" + t.id + \" could not be verified!\");\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Generates hash for a block\r\n * @param b Block to be hashed\r\n * @param transactions Array of all transactions\r\n */\r\nexport function generateBlockHash(b : block, transactions: transaction[]) : string {\r\n    if(b.nonce === undefined) return \"\";\r\n\r\n    let blockString = blockToString(b, transactions);\r\n    return generateBlockHashFromString(blockString, b.nonce);\r\n}\r\n\r\n/**\r\n * Generates hash for a block in string format\r\n * @param blockString String-representation of a block\r\n * @param nonce Nonce for that block\r\n */\r\nexport function generateBlockHashFromString(blockString : string, nonce : number) {\r\n    return sha256(blockString + nonce);\r\n}\r\n\r\n/**\r\n * Returns string of a given block which includes the\r\n * previous hash and all transactions\r\n * @param b Block\r\n * @param transactions Array of all transactions\r\n */\r\nexport function blockToString(b : block, transactions: transaction[]) : string {\r\n    let transactionArray = [];\r\n    for(let i = 0; i < b.transactions.length; i++) {\r\n        let t = transactions[b.transactions[i]];\r\n        transactionArray.push(transactionToString(t));\r\n    }\r\n\r\n    let obj = {\r\n        prevHash: b.prevHash,\r\n        transactions: transactionArray\r\n    }\r\n\r\n    return JSON.stringify(obj);\r\n}\r\n\r\n/**\r\n * Returns string of a given transaction which includes\r\n * the id, the sender, the receiver and the amount\r\n * @param t Transaction\r\n */\r\nfunction transactionToString(t :transaction) : string {\r\n    let obj = {\r\n        id: t.id,\r\n        from: t.from,\r\n        to: t.to,\r\n        amount: t.amount\r\n    }\r\n\r\n    return JSON.stringify(obj);\r\n}"],"sourceRoot":""}