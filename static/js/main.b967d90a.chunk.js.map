{"version":3,"sources":["Components/Account/Account.tsx","Utils/ToastFunctions.ts","res/arrowright.svg","Components/Transaction/Transaction.tsx","Components/UpperList/UpperList.tsx","Utils/Interfaces.ts","Components/Blockchain/Block.tsx","Components/Blockchain/Blockchain.tsx","App.tsx","index.tsx","Utils/Functions.ts"],"names":["Account","className","this","props","account","id","privateKey","address","balance","React","Component","warnStyle","backgroundColor","options","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","style","showError","msg","toast","error","_g","Transaction","state","from","to","amount","sign","t","transaction","signFunction","setState","draggableId","index","provided","snapshot","isDragging","ref","innerRef","draggableProps","dragHandleProps","editable","value","onChange","v","newValue","parseInt","target","removeSignatureFunction","Array","numberOfAccounts","keys","map","x","type","min","max","event","val","isNaN","signed","signature","onClick","UpperList","printTransactionList","transactions","transactionOrder","array","printFunction","err","arg","accounts","printAccountList","addFunction","console","log","blockList","title","droppableId","isDropDisabled","dropDisabled","droppableProps","isDraggingOver","placeholder","validStartHash","Block","block","confirmFunction","prevHash","nonce","confirmed","hash","substr","length","_excluded","_extends","Object","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgArrowright","_ref","svgRef","titleId","xmlns","enableBackground","xmlSpace","viewBox","y","y2","x1","x2","stroke","strokeMiterlimit","y1","strokeWidth","points","fill","ForwardRef","Blockchain","printBlocks","blocks","Fragment","App","addAccount","generateKeyAddressPair","count","accountIdCount","a","privateKeyArray","addressArray","Math","floor","random","arr","push","addTransaction","transactionIdCount","unusedArr","unusedTransactions","signTransaction","sender","sig","transactionArray","signatureArray","removeSignature","recalculateBlocks","changed","generateBlockHash","confirmBlock","warn","verifyAllBlockTransactions","startsWith","onDragEnd","result","destination","sourceIndex","destinationIndex","transactionId","replace","splice","transactionList","blockId","blockIndex","sourceBlockId","destinationBlockId","sourceTransactions","destinationTransactions","ReactDOM","render","StrictMode","document","getElementById","getStringfromArray","Buffer","util","encodeBase64","toString","getArrayfromString","str","encode","pair","nacl","keyPair","secretKey","publicKey","messageArr","transactionToString","detached","verifyTransaction","verify","b","obj","blockString","JSON","stringify","sha256"],"mappings":"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","file":"static/js/main.b967d90a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {account} from \"../../Utils/Interfaces\";\r\nimport \"./Account.scss\"\r\nimport \"../UpperList/UpperList.scss\"\r\n\r\ninterface AccountProps {\r\n    account: account\r\n}\r\n\r\nclass Account extends React.Component<AccountProps, {}> {\r\n    render() {\r\n        return <div className={\"account listElement\"}>\r\n            <table className={\"accountTable listTable\"}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td className={\"id\"}>{this.props.account.id}</td>\r\n                        <td className={\"privateKey smallText\"}>{this.props.account.privateKey}</td>\r\n                        <td className={\"address smallText\"}>{this.props.account.address}</td>\r\n                        <td className={\"balance\"}>{this.props.account.balance}</td>\r\n                    </tr>\r\n                    <tr className={\"description\"}>\r\n                        <td>ID</td>\r\n                        <td>Private Key</td>\r\n                        <td>Address</td>\r\n                        <td>Balance</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default Account;","import {toast, ToastOptions} from \"react-toastify\";\r\n\r\nconst warnStyle = {\r\n    backgroundColor: \"#FF5226\"\r\n}\r\n\r\nconst options : ToastOptions = {\r\n    position: \"top-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: false,\r\n    progress: undefined,\r\n    style: warnStyle\r\n}\r\n\r\nexport function showError(msg: string) : void {\r\n    toast.error(msg, options);\r\n}\r\n\r\nexport function showWarning(msg: string) : void {\r\n    toast.warn(msg, {...options, style: warnStyle});\r\n}","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgArrowright(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    id: \"Layer_1\",\n    enableBackground: \"new 0 0 150 50\",\n    xmlSpace: \"preserve\",\n    viewBox: \"0 0 150 50\",\n    y: \"0px\",\n    x: \"0px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"line\", {\n    y2: 24.704,\n    x1: 1.266,\n    x2: 125.3,\n    stroke: \"white\",\n    strokeMiterlimit: 10,\n    y1: 24.704,\n    strokeWidth: 6\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"124.4 6.284 124.4 44.606 148.35 23.69\",\n    stroke: \"white\",\n    fill: \"white\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowright);\nexport default __webpack_public_path__ + \"static/media/arrowright.8349a54a.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport {transcation} from \"../../Utils/Interfaces\";\r\nimport \"./Transaction.scss\"\r\nimport \"../UpperList/UpperList.scss\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport {showError} from \"../../Utils/ToastFunctions\";\r\n\r\ninterface TransactionProps {\r\n    transaction: transcation,\r\n    numberOfAccounts: number,\r\n    signFunction: any,\r\n    removeSignatureFunction: any,\r\n    index: number\r\n}\r\n\r\ninterface transactionState {\r\n    from: number,\r\n    to: number\r\n    amount: number\r\n}\r\n\r\nclass Transaction extends React.Component<TransactionProps, {}> {\r\n    componentDidMount() {\r\n        let t = this.props.transaction;\r\n        if(t.from !== undefined && t.to !== undefined && t.amount !== undefined) {\r\n            this.setState({\r\n                from: t.from,\r\n                to: t.to,\r\n                amount: t.amount,\r\n            });\r\n        }\r\n    }\r\n\r\n    state : transactionState = {\r\n        from: 0,\r\n        to: 0,\r\n        amount: 0\r\n    }\r\n\r\n    sign = () => {\r\n        if(this.state.from !== -1 && this.state.to !== -1 && this.state.amount !== -1) {\r\n            let t = this.props.transaction;\r\n            t.from = this.state.from;\r\n            t.to = this.state.to;\r\n            t.amount = this.state.amount\r\n\r\n            this.props.signFunction(t);\r\n        } else {\r\n            showError(\"All values must be set to sign a transaction!\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return <Draggable draggableId={\"transaction\" + this.props.transaction.id} index={this.props.index}>\r\n            {(provided, snapshot) => (\r\n                    <div className={\"transaction listElement\" + (snapshot.isDragging ? \" transactionDragging\" : \"\")}\r\n                         ref={provided.innerRef}\r\n                         {...provided.draggableProps}\r\n                         {...provided.dragHandleProps}\r\n                    >\r\n                        <table className={\"transactionTable listTable\"}>\r\n                            <tbody>\r\n                            <tr>\r\n                                <td className={\"id\"}>{this.props.transaction.id}</td>\r\n                                <td className={\"from\" + (!this.props.transaction.editable ? \" biggerText\" : \"\")}>\r\n                                    {\r\n                                        this.props.transaction.editable ?\r\n                                            <select className={\"selectStyle\"}\r\n                                                    value={this.state.from}\r\n                                                onChange={(v) => {\r\n                                                let newValue = parseInt(v.target.value);\r\n                                                if(this.state.from !== newValue) {\r\n                                                    this.props.removeSignatureFunction(this.props.transaction.id);\r\n                                                    this.setState({from: newValue});\r\n                                                }\r\n                                            }}>\r\n                                                {\r\n                                                    Array.from(Array(this.props.numberOfAccounts).keys()).map(x => {\r\n                                                    return <option value={x} key={x}>{x}</option>\r\n                                                })}\r\n                                            </select>\r\n                                            :\r\n                                            this.props.transaction.from\r\n                                    }\r\n                                </td>\r\n                                <td className={\"to\" + (!this.props.transaction.editable ? \" biggerText\" : \"\")}>\r\n                                    {\r\n                                        this.props.transaction.editable ?\r\n                                            <select className={\"selectStyle\"}\r\n                                                    value={this.state.to}\r\n                                                    onChange={(v) => {\r\n                                                        let newValue = parseInt(v.target.value);\r\n                                                        if(this.state.to !== newValue) {\r\n                                                            this.props.removeSignatureFunction(this.props.transaction.id);\r\n                                                            this.setState({to: newValue});\r\n                                                        }\r\n                                                    }}>\r\n                                                {\r\n                                                    Array.from(Array(this.props.numberOfAccounts).keys()).map(x => {\r\n                                                        return <option value={x} key={x}>{x}</option>\r\n                                                    })}\r\n                                            </select>\r\n                                            :\r\n                                            this.props.transaction.to\r\n                                    }\r\n                                </td>\r\n                                <td className={\"amount\"}>\r\n                                    {\r\n                                        this.props.transaction.editable ?\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                className={\"amountInput\"}\r\n                                                min=\"0\"\r\n                                                max=\"1000\"\r\n                                                value={this.state.amount}\r\n                                                onChange={(event) => {\r\n                                                    let val = parseInt(event.target.value);\r\n\r\n                                                    if(!isNaN(val)) {\r\n                                                        let oldValue = this.state.amount;\r\n                                                        if (oldValue !== val) {\r\n                                                            this.props.removeSignatureFunction(this.props.transaction.id);\r\n                                                        }\r\n\r\n                                                        this.setState({amount: val});\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                            :\r\n                                            this.props.transaction.amount\r\n                                    }\r\n                                </td>\r\n                                <td className={\"signature\" + (this.props.transaction.signed ? \" smallText\" : \"\")}>\r\n                                    {\r\n                                        this.props.transaction.signed ?\r\n                                            this.props.transaction.signature\r\n                                            :\r\n                                            <div className={\"signButton\"} onClick={() => this.sign()}>Sign</div>\r\n                                    }\r\n                                </td>\r\n                            </tr>\r\n                            <tr className={\"description\"}>\r\n                                <td>ID</td>\r\n                                <td>From</td>\r\n                                <td>To</td>\r\n                                <td>Amount</td>\r\n                                <td>Signature</td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n            )}\r\n        </Draggable>;\r\n    }\r\n}\r\n\r\nexport default Transaction;","import React from 'react';\r\nimport './UpperList.scss';\r\nimport {account, settings, transcation} from \"../../Utils/Interfaces\";\r\nimport Account from \"../Account/Account\";\r\nimport Transaction from \"../Transaction/Transaction\";\r\nimport {Droppable} from \"react-beautiful-dnd\";\r\n\r\ninterface UpperListProps {\r\n    title: string;\r\n    accounts?: account[],\r\n    transactions?: transcation[],\r\n    transactionOrder?: number[],\r\n    numberOfAccounts?: number,\r\n    settings?: settings[],\r\n    className?: string\r\n    addFunction?: any\r\n    signFunction?: any,\r\n    removeSignatureFunction?: any,\r\n    blockList?: boolean,\r\n    droppableId: string,\r\n    dropDisabled?: boolean\r\n}\r\n\r\nclass UpperList extends React.Component<UpperListProps, {}> {\r\n    render() {\r\n        let printFunction : any = (err : any) => {return <div className={\"listError\"}>{err}</div>};\r\n        let arg : any = \"Error\";\r\n        if(this.props.accounts) {\r\n            printFunction = this.printAccountList;\r\n            arg = this.props.accounts;\r\n        } else if(this.props.transactions) {\r\n            printFunction = this.printTransactionList;\r\n            arg = this.props.transactions\r\n        }\r\n\r\n        let addFunction = this.props.addFunction;\r\n        if(!addFunction) addFunction = () => {console.log(\"Error: function is not defined\")};\r\n\r\n        return (<div className={\"upperListContainer \" + this.props.className}>\r\n            {\r\n                this.props.blockList ?\r\n                    \"\"\r\n                    :\r\n                    <div className={\"upperListTitle\"}>{this.props.title}</div>\r\n\r\n            }\r\n                            <Droppable droppableId={this.props.droppableId} isDropDisabled={this.props.dropDisabled}>\r\n                                {(provided, snapshot) => (\r\n                                    <div ref={provided.innerRef}\r\n                                        {...provided.droppableProps}\r\n                                        className={\"upperList\"}\r\n                                         style={{backgroundColor: snapshot.isDraggingOver ? \"rgba(255,255,255,0.05)\" : \"\"}}\r\n                                    >\r\n                                        {printFunction(arg)}\r\n                                        {provided.placeholder}\r\n                                    </div>\r\n                                    )}</Droppable>\r\n            {\r\n                this.props.blockList ?\r\n                    \"\"\r\n                    :\r\n            <div className={\"addButtonContainer\"}>\r\n                <div className={\"addButton\"} onClick={() => addFunction()}>\r\n                    Add\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>);\r\n    }\r\n\r\n    printAccountList(accounts : account[]) {\r\n        return accounts.map(function (value, index, array) {\r\n            return <Account account={value} key={value.id} />;\r\n        });\r\n    }\r\n\r\n    printTransactionList = (transactions : transcation[]) => {\r\n        let numberOfAccounts = 0;\r\n        if(this.props?.numberOfAccounts) {\r\n            numberOfAccounts = this.props.numberOfAccounts\r\n        }\r\n        let transactionOrder = this.props.transactionOrder;\r\n        if(transactionOrder === undefined) transactionOrder = [];\r\n        let signFunction = this.props.signFunction;\r\n        let removeSignatureFunction = this.props.removeSignatureFunction;\r\n\r\n        return (transactionOrder.map(function (value, index, array) {\r\n            return <Transaction transaction={transactions[value]} numberOfAccounts={numberOfAccounts} key={value}\r\n                                signFunction={signFunction} removeSignatureFunction={removeSignatureFunction} index={index}/>\r\n        }));\r\n    }\r\n}\r\n\r\nexport default UpperList;","export const firstHash = \"0000\";\r\nexport const validStartHash = \"00\";\r\n\r\nexport interface account {\r\n    id: number,\r\n    privateKey?: string,\r\n    privateKeyArray?: Uint8Array\r\n    address?: string,\r\n    addressArray?: Uint8Array\r\n    balance?: number\r\n}\r\n\r\nexport interface transcation {\r\n    id: number,\r\n    from?: number,\r\n    to?: number,\r\n    amount?: number,\r\n    signed: boolean\r\n    signature?: string,\r\n    signatureArray?: Uint8Array\r\n    editable: boolean\r\n}\r\n\r\nexport interface settings {\r\n    name: string,\r\n    toggle: boolean,\r\n    possibleValues?: string[],\r\n    currentState: string | boolean\r\n}\r\n\r\nexport interface keyAddressPair {\r\n    privateKey: string,\r\n    privateKeyArray?: Uint8Array\r\n    address: string,\r\n    addressArray: Uint8Array\r\n}\r\n\r\nexport interface signaturePair {\r\n    signature: string,\r\n    signatureArray: Uint8Array\r\n}\r\n\r\nexport interface block {\r\n    id: number,\r\n    prevHash?: string,\r\n    transactions: number[],\r\n    nonce?: number,\r\n    hash?: string,\r\n    confirmed: boolean\r\n}","import React from 'react';\r\nimport \"./Blockchain.scss\";\r\nimport {block, transcation, validStartHash} from \"../../Utils/Interfaces\";\r\nimport UpperList from \"../UpperList/UpperList\";\r\n\r\ninterface BlockProps {\r\n    block: block,\r\n    transactions: transcation[],\r\n    confirmFunction: any\r\n}\r\n\r\nclass Block extends React.Component<BlockProps, {}> {\r\n    printTransactionList = () => {\r\n        return  <UpperList\r\n                        droppableId={\"block\" + this.props.block.id}\r\n                        title={\"transactions\"}\r\n                        transactions={this.props.transactions}\r\n                        transactionOrder={this.props.block.transactions}\r\n                        className={\"transactionListContainer\"}\r\n                        blockList={true}/>\r\n    }\r\n\r\n    confirmFunction = () => {\r\n        this.props.confirmFunction(this.props.block.id);\r\n    }\r\n\r\n    render() {\r\n        return <div className={\"blockContainer\"}>\r\n            <div className={\"block\"}>\r\n                <div className={\"prevHash blockSmallText\"}>\r\n                    {this.props.block?.prevHash}\r\n                    <div className={\"blockDescription\"}>Previous hash</div>\r\n                </div>\r\n                <div className={\"transactions\"}>\r\n                    <div className={\"transactionList\"}>\r\n                        {this.printTransactionList()}\r\n                    </div>\r\n                    <div className={\"blockDescription\"}>Transactions</div>\r\n                </div>\r\n                <div className={\"nonce\"}>\r\n                    {this.props.block?.nonce}\r\n                    <div className={\"blockDescription\"}>Nonce</div>\r\n                </div>\r\n                <div className={\"confirmContainer\"}>\r\n                    {\r\n                        this.props.block.confirmed ?\r\n                            <span className={\"confirmedString\"}>confirmed</span>\r\n                            :\r\n                            <div className={\"confirmButton\"} onClick={() => this.confirmFunction()}>\r\n                                Confirm\r\n                            </div>\r\n                    }\r\n                    <div className={\"blockDescription\"}>Confirmation</div>\r\n                </div>\r\n                <div className={\"hash blockSmallText\"}>\r\n                    {\r\n                        this.props.block.confirmed ?\r\n                            <span>\r\n                                <span className={\"confirmedString\"}>{validStartHash}</span>\r\n                                {this.props.block?.hash?.substr(validStartHash.length)}\r\n                            </span>\r\n                            :\r\n                            this.props.block?.hash\r\n                    }\r\n                    <div className={\"blockDescription\"}>Hash</div>\r\n                </div>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default Block;","import React from 'react';\r\nimport \"./Blockchain.scss\";\r\nimport {block, transcation} from \"../../Utils/Interfaces\";\r\nimport Block from \"./Block\";\r\nimport {ReactComponent as Arrow} from \"../../res/arrowright.svg\";\r\n\r\ninterface BlockchainProps {\r\n    blocks: block[],\r\n    transactions: transcation[],\r\n    confirmFunction: any\r\n}\r\n\r\nclass Blockchain extends React.Component<BlockchainProps, {}> {\r\n    render() {\r\n        return <div className={\"blockchain\"}>\r\n            {this.printBlocks()}\r\n        </div>;\r\n    }\r\n    printBlocks = () => {\r\n        let transactions = this.props.transactions;\r\n        let confirmFunction = this.props.confirmFunction;\r\n\r\n        return this.props.blocks.map(function (value, index, array) {\r\n            return (\r\n                <React.Fragment key={index}>\r\n                    <Block\r\n                        block={value}\r\n                        transactions={transactions}\r\n                        confirmFunction={confirmFunction}\r\n                    />\r\n                    {index !== array.length -1 ? <div className={\"arrows\"}><Arrow /></div> : \"\" }\r\n                </React.Fragment>\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nexport default Blockchain;","import React from 'react';\nimport './App.scss';\nimport UpperList from \"./Components/UpperList/UpperList\";\nimport {account, block, firstHash, signaturePair, transcation, validStartHash} from \"./Utils/Interfaces\";\nimport {\n    generateBlockHash,\n    generateKeyAddressPair,\n    signTransaction,\n    verifyAllBlockTransactions\n} from \"./Utils/Functions\";\nimport Blockchain from \"./Components/Blockchain/Blockchain\";\nimport {DragDropContext} from \"react-beautiful-dnd\";\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {showError, showWarning} from \"./Utils/ToastFunctions\";\n\ninterface AppProps {\n}\n\ninterface AppState {\n    accountIdCount: number,\n    accounts: account[],\n    transactionIdCount: number,\n    transactions: transcation[],\n    unusedTransactions: number[],\n    blocks: block[]\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n\n        this.state = {\n            accountIdCount: 0,\n            accounts: [],\n            transactionIdCount: 0,\n            transactions: [],\n            unusedTransactions: [],\n            blocks: [{\n                id: 0,\n                prevHash: firstHash,\n                nonce: 0,\n                transactions: [],\n                confirmed: false\n            },{\n                id: 1,\n                nonce: 0,\n                transactions: [],\n                confirmed: false\n            }]\n        };\n\n        this.recalculateBlocks();\n    }\n\n    addAccount = () : void => {\n        let keys = generateKeyAddressPair();\n        let count = this.state.accountIdCount;\n\n        let a : account = {\n            id: count,\n            privateKey: keys.privateKey,\n            privateKeyArray: keys.privateKeyArray,\n            address: keys.address,\n            addressArray: keys.addressArray\n        }\n        this.setState({accountIdCount: count + 1});\n\n        a.balance = Math.floor(Math.random() * 1001);\n\n        let arr : account[] = this.state.accounts;\n        arr.push(a);\n        this.setState({accounts: arr});\n    }\n\n    addTransaction = () : void => {\n        let count = this.state.transactionIdCount;\n\n        let t : transcation = {\n            id: count,\n            signed: false,\n            editable: true\n        }\n        this.setState({transactionIdCount: count + 1});\n\n        let arr : transcation[] = this.state.transactions;\n        let unusedArr : number[] = this.state.unusedTransactions;\n        arr.push(t);\n        unusedArr.push(t.id);\n        this.setState({transactions: arr, unusedTransactions: unusedArr});\n    }\n\n    signTransaction = (t: transcation) => {\n        if(this.state.accounts.length === 0) {\n            showError(\"At least one account is needed to set all transaction values!\");\n            return;\n        }\n\n        if(t.from === undefined || t.to === undefined) {\n            showError(\"All values have to be set to sign a transaction!\");\n            return;\n        }\n\n        let sender : number = t.from;\n\n        let privateKey = this.state.accounts[sender].privateKeyArray;\n        let address = this.state.accounts[sender].addressArray;\n\n        if(sender !== -1 && privateKey !== undefined && address !== undefined) {\n            let sig : signaturePair = signTransaction(t, privateKey);\n\n            let transactionArray = this.state.transactions;\n\n            transactionArray[t.id].signed = true;\n            transactionArray[t.id].signatureArray = sig.signatureArray;\n            transactionArray[t.id].signature = sig.signature;\n\n            this.setState({transactions: transactionArray});\n        }\n    }\n\n    removeSignature = (id : number) => {\n        let transactionArray : transcation[] = this.state.transactions;\n        let t : transcation = transactionArray[id];\n\n        t.signed = false;\n        t.signatureArray = undefined;\n        t.signature = undefined;\n\n        transactionArray[id] = t;\n\n        this.setState({transactions: transactionArray});\n    }\n\n    recalculateBlocks = () => {\n        let blocks = [...this.state.blocks];\n        let transactions = [...this.state.transactions];\n\n        let changed = false;\n\n        for(let i = 0; i < blocks.length; i++) {\n            let hash = generateBlockHash(blocks[i], transactions);\n            if(hash === \"\") {\n                console.log(\"Error while generating hash, see previous error-messages!\");\n                return;\n            }\n            if(hash !== blocks[i].hash) {\n                changed = true;\n            }\n            if(changed) {\n                blocks[i].confirmed = false;\n            }\n\n            blocks[i].hash = hash;\n            if(i !== blocks.length-1) {\n                blocks[i+1].prevHash = hash;\n            }\n        }\n\n        this.setState({blocks: blocks});\n    }\n\n    confirmBlock = (id : number) => {\n        let blocks = [...this.state.blocks];\n        let transactions = [...this.state.transactions];\n        let accounts = [...this.state.accounts];\n\n        if(id !== 0 && !blocks[id-1].confirmed) {\n            showWarning(\"All previous blocks need to be confirmed first!\");\n            return;\n        }\n\n        let transactionsValidated = verifyAllBlockTransactions(blocks[id], transactions, accounts);\n\n        if(!transactionsValidated) {\n            showError(\"Some transactions could not be verified!\");\n            return;\n        }\n\n        let hash = \"\";\n        let block = blocks[id];\n        block.nonce = -1;\n\n        do {\n            block.nonce++;\n            hash = generateBlockHash(block, transactions);\n        } while(!hash.startsWith(validStartHash) || block.nonce > 10000)\n\n        if(block.nonce > 10000 && !hash.startsWith(validStartHash)) {\n            showError(\"Could not validate block!\");\n            console.log(\"Didn't find nonce in 10000 iterations\");\n            return;\n        }\n\n        block.confirmed = true;\n        block.hash = hash;\n        blocks[id] = block;\n\n        this.setState({blocks: blocks}, () => {\n            this.recalculateBlocks();\n        });\n    }\n\n    onDragEnd = (result : any) => {\n        let {destination, source, draggableId} = result;\n\n        if(result.destination === null) return;\n        if(destination.droppableId === source.droppableId && destination.index  === source.index) return;\n\n        let sourceIndex = result.source.index;\n        let destinationIndex = result.destination.index;\n        let transactionId : number = parseInt(draggableId.replace(\"transaction\", \"\"));\n\n        if(result.destination.droppableId === \"transactionList\") {\n            if(result.source.droppableId === \"transactionList\") {\n                let unusedTransactions = this.state.unusedTransactions;\n\n                unusedTransactions.splice(sourceIndex, 1);\n                unusedTransactions.splice(destinationIndex, 0, transactionId);\n\n                this.setState({unusedTransactions: unusedTransactions});\n            } else {\n                let transactionList = this.state.transactions;\n\n                let source = result.source.droppableId.replace(\"block\", \"\");\n                let blockId = parseInt(source);\n\n                let blocks = this.state.blocks;\n                blocks[blockId].transactions.splice(sourceIndex, 1);\n\n                let unusedTransactions = this.state.unusedTransactions;\n                unusedTransactions.splice(destinationIndex, 0, transactionId);\n\n                transactionList[transactionId].editable = true;\n\n                this.setState({blocks: blocks, unusedTransactions: unusedTransactions, transactions: transactionList});\n            }\n        } else {\n            if(result.source.droppableId === \"transactionList\") {\n                let transactionList = this.state.transactions;\n                if(!transactionList[transactionId].signed) {\n                    showError(\"Transaction must be signed to be included in a block!\");\n                    return;\n                }\n\n                let unusedTransactions = this.state.unusedTransactions;\n                unusedTransactions.splice(sourceIndex, 1);\n\n                let blocks = this.state.blocks;\n                let blockId = parseInt(result.destination.droppableId.replace(\"block\", \"\"));\n                let blockIndex = result.destination.index;\n                blocks[blockId].transactions.splice(blockIndex, 0, transactionId);\n\n                transactionList[transactionId].editable = false;\n\n                this.setState({unusedTransactions: unusedTransactions, blocks: blocks, transactions: transactionList});\n            }  else {\n                // Source and destination are blocks\n                let sourceBlockId = parseInt(result.source.droppableId.replace(\"block\", \"\"));\n                let destinationBlockId = parseInt(result.destination.droppableId.replace(\"block\", \"\"));\n\n                if(sourceBlockId === destinationBlockId) {\n                    let blocks = this.state.blocks;\n                    let transactions = blocks[sourceBlockId].transactions;\n\n                    transactions.splice(sourceIndex, 1);\n                    transactions.splice(destinationIndex, 0, transactionId);\n\n                    blocks[sourceBlockId].transactions = transactions;\n                    this.setState({blocks: blocks});\n                } else {\n                    let blocks = this.state.blocks;\n\n                    let sourceTransactions = blocks[sourceBlockId].transactions;\n                    sourceTransactions.splice(sourceIndex, 1);\n                    blocks[sourceBlockId].transactions = sourceTransactions;\n\n                    let destinationTransactions = blocks[destinationBlockId].transactions;\n                    destinationTransactions.splice(destinationIndex, 0, transactionId);\n                    blocks[destinationBlockId].transactions = destinationTransactions;\n\n                    this.setState({blocks: blocks});\n                }\n            }\n        }\n\n        this.recalculateBlocks();\n    }\n\n    render() {\n        return <div className=\"App\">\n            <DragDropContext onDragEnd={this.onDragEnd}>\n            <div id={\"upperContent\"}>\n                <UpperList\n                    title={\"accounts\"}\n                    accounts={this.state.accounts}\n                    droppableId={\"accountList\"}\n                    className={\"accountListContainer\"}\n                    addFunction={this.addAccount}\n                    dropDisabled={true}\n                />\n                <UpperList\n                    title={\"transactions\"}\n                    transactions={this.state.transactions}\n                    transactionOrder={this.state.unusedTransactions}\n                    numberOfAccounts={this.state.accountIdCount}\n                    className={\"transactionListContainer\"}\n                    droppableId={\"transactionList\"}\n                    addFunction={this.addTransaction}\n                    signFunction={this.signTransaction}\n                    removeSignatureFunction={this.removeSignature}\n                />\n            </div>\n            <div id={\"blockchainContent\"}>\n                <Blockchain\n                    blocks={this.state.blocks}\n                    transactions={this.state.transactions}\n                    confirmFunction={this.confirmBlock}\n                />\n            </div>\n            <div id={\"footer\"}>\n                by nils lambertz\n            </div></DragDropContext>\n            <ToastContainer />\n        </div>;\n    };\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","import {account, block, keyAddressPair, signaturePair, transcation} from \"./Interfaces\";\r\nimport nacl, {BoxKeyPair} from \"tweetnacl\";\r\nimport util from \"tweetnacl-util\";\r\nimport {encode} from \"@stablelib/utf8\";\r\nimport {sha256} from \"js-sha256\";\r\n\r\nfunction getStringfromArray(array : Uint8Array) {\r\n    return Buffer.from(util.encodeBase64(array), \"base64\").toString(\"hex\");\r\n}\r\n\r\nfunction getArrayfromString(str : string) : Uint8Array {\r\n    return encode(str);\r\n}\r\n\r\nexport function generateKeyAddressPair() : keyAddressPair {\r\n    let pair : BoxKeyPair = nacl.sign.keyPair();\r\n\r\n    let privateKey = getStringfromArray(pair.secretKey);\r\n    let address = getStringfromArray(pair.publicKey);\r\n\r\n    return {\r\n        privateKey: privateKey,\r\n        privateKeyArray: pair.secretKey,\r\n        address: address,\r\n        addressArray: pair.publicKey\r\n    }\r\n}\r\n\r\nexport function signTransaction(t : transcation, privateKeyArray : Uint8Array) : signaturePair {\r\n    let message : string = transactionToString(t);\r\n    let messageArr = getArrayfromString(message);\r\n\r\n    let sig : Uint8Array = nacl.sign.detached(messageArr, privateKeyArray);\r\n\r\n    return {\r\n        signature: getStringfromArray(sig),\r\n        signatureArray: sig\r\n    };\r\n}\r\n\r\nexport function verifyTransaction(t: transcation, signatureArray : Uint8Array, addressArray : Uint8Array) : boolean {\r\n    let message : string = transactionToString(t);\r\n    let messageArr = getArrayfromString(message);\r\n\r\n    return nacl.sign.detached.verify(messageArr, signatureArray, addressArray);\r\n}\r\n\r\nexport function verifyAllBlockTransactions(b : block, transactions: transcation[], accounts: account[]) : boolean {\r\n    for(let i = 0; i < b.transactions.length; i++) {\r\n        let t = transactions[b.transactions[i]];\r\n        if (t.from !== undefined) {\r\n            let account = accounts[t.from];\r\n\r\n            if (t.signatureArray !== undefined && account.addressArray !== undefined) {\r\n                let verified = verifyTransaction(t, t.signatureArray, account.addressArray);\r\n                if (!verified) {\r\n                    console.log(\"Error in block \" + t.id + \": Signature in transaction \" + t.id + \" could not be verified!\");\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function generateBlockHash(b : block, transactions: transcation[]) : string {\r\n    let transactionArray = [];\r\n    for(let i = 0; i < b.transactions.length; i++) {\r\n        let t = transactions[b.transactions[i]];\r\n        transactionArray.push(transactionToString(t));\r\n    }\r\n\r\n    let obj = {\r\n        prevHash: b.prevHash,\r\n        transactions: transactionArray,\r\n        nonce: b.nonce\r\n    }\r\n\r\n    let blockString = JSON.stringify(obj);\r\n    return sha256(blockString);\r\n}\r\n\r\nfunction transactionToString(t :transcation) : string {\r\n    let obj = {\r\n        id: t.id,\r\n        from: t.from,\r\n        to: t.to,\r\n        amount: t.amount\r\n    }\r\n\r\n    return JSON.stringify(obj);\r\n}"],"sourceRoot":""}