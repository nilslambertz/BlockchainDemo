{"version":3,"sources":["Components/Account/Account.tsx","Utils/ToastFunctions.ts","res/arrowright.svg","Components/Transaction/Transaction.tsx","Components/UpperList/UpperList.tsx","Utils/Interfaces.ts","Components/Blockchain/Block.tsx","Components/Blockchain/Blockchain.tsx","App.tsx","index.tsx","Utils/Functions.ts"],"names":["Account","className","this","props","account","id","privateKey","address","balanceBeforeBlock","lastConfirmedBlock","React","Component","warnStyle","backgroundColor","options","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","style","showError","msg","toast","error","_g","Transaction","state","from","to","amount","sign","t","transaction","signFunction","setState","draggableId","index","provided","snapshot","isDragging","ref","innerRef","draggableProps","dragHandleProps","editable","value","onChange","v","newValue","parseInt","target","removeSignatureFunction","Array","numberOfAccounts","keys","map","x","type","min","max","event","val","isNaN","signed","signature","onClick","UpperList","printAccountList","accounts","array","printTransactionList","transactions","transactionOrder","printFunction","err","arg","addFunction","console","log","blockList","title","droppableId","isDropDisabled","dropDisabled","droppableProps","isDraggingOver","placeholder","validStartHash","repeat","Block","block","confirmFunction","prevHash","nonce","confirmed","hash","substr","length","_excluded","_extends","Object","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgArrowright","_ref","svgRef","titleId","xmlns","enableBackground","xmlSpace","viewBox","y","y2","x1","x2","stroke","strokeMiterlimit","y1","strokeWidth","points","fill","ForwardRef","Blockchain","printBlocks","blocks","Fragment","App","addAccount","generateKeyAddressPair","count","accountIdCount","balance","Math","floor","random","a","privateKeyArray","addressArray","arr","push","addTransaction","transactionIdCount","unusedArr","unusedTransactions","signTransaction","sender","sig","transactionArray","signatureArray","removeSignature","recalculateBlocks","lastUnused","lastUnusedBlock","nextId","blockIdCount","changed","lastConfirmed","generateBlockHash","confirmBlock","warn","verifyAllBlockTransactions","balancesAfterBlock","j","slice","blockString","blockToString","sha256","startsWith","onDragEnd","result","destination","sourceIndex","destinationIndex","transactionId","replace","transactionList","splice","blockId","blockIndex","sourceBlockId","destinationBlockId","sourceTransactions","destinationTransactions","ReactDOM","render","StrictMode","document","getElementById","getStringfromArray","Buffer","util","encodeBase64","toString","getArrayfromString","str","encode","pair","nacl","keyPair","secretKey","publicKey","messageArr","transactionToString","detached","verifyTransaction","verify","b","obj","JSON","stringify"],"mappings":"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","file":"static/js/main.649f2855.chunk.js","sourcesContent":["import React from 'react';\r\nimport {account} from \"../../Utils/Interfaces\";\r\nimport \"./Account.scss\"\r\nimport \"../UpperList/UpperList.scss\"\r\n\r\ninterface AccountProps {\r\n    account: account,\r\n    lastConfirmedBlock: number\r\n}\r\n\r\nclass Account extends React.Component<AccountProps, {}> {\r\n    render() {\r\n        return <div className={\"account listElement\"}>\r\n            <table className={\"accountTable listTable\"}>\r\n                <tbody>\r\n                    <tr>\r\n                        <td className={\"id\"}>{this.props.account.id}</td>\r\n                        <td className={\"privateKey smallText\"}>{this.props.account.privateKey}</td>\r\n                        <td className={\"address smallText\"}>{this.props.account.address}</td>\r\n                        <td className={\"balance\"}>{this.props.account.balanceBeforeBlock[this.props.lastConfirmedBlock+1]}</td>\r\n                    </tr>\r\n                    <tr className={\"description\"}>\r\n                        <td>ID</td>\r\n                        <td>Private Key</td>\r\n                        <td>Address</td>\r\n                        <td>Balance</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default Account;","import {toast, ToastOptions} from \"react-toastify\";\r\n\r\nconst warnStyle = {\r\n    backgroundColor: \"#FF5226\"\r\n}\r\n\r\nconst options : ToastOptions = {\r\n    position: \"top-right\",\r\n    autoClose: 3000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: false,\r\n    progress: undefined,\r\n    style: warnStyle\r\n}\r\n\r\nexport function showError(msg: string) : void {\r\n    toast.error(msg, options);\r\n}\r\n\r\nexport function showWarning(msg: string) : void {\r\n    toast.warn(msg, {...options, style: warnStyle});\r\n}","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgArrowright(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    id: \"Layer_1\",\n    enableBackground: \"new 0 0 150 50\",\n    xmlSpace: \"preserve\",\n    viewBox: \"0 0 150 50\",\n    y: \"0px\",\n    x: \"0px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"line\", {\n    y2: 24.704,\n    x1: 1.266,\n    x2: 125.3,\n    stroke: \"white\",\n    strokeMiterlimit: 10,\n    y1: 24.704,\n    strokeWidth: 6\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"124.4 6.284 124.4 44.606 148.35 23.69\",\n    stroke: \"white\",\n    fill: \"white\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowright);\nexport default __webpack_public_path__ + \"static/media/arrowright.8349a54a.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport {transcation} from \"../../Utils/Interfaces\";\r\nimport \"./Transaction.scss\"\r\nimport \"../UpperList/UpperList.scss\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport {showError} from \"../../Utils/ToastFunctions\";\r\n\r\ninterface TransactionProps {\r\n    transaction: transcation,\r\n    numberOfAccounts: number,\r\n    signFunction: any,\r\n    removeSignatureFunction: any,\r\n    index: number\r\n}\r\n\r\ninterface transactionState {\r\n    from: number,\r\n    to: number\r\n    amount: number\r\n}\r\n\r\nclass Transaction extends React.Component<TransactionProps, {}> {\r\n    componentDidMount() {\r\n        let t = this.props.transaction;\r\n        if(t.from !== undefined && t.to !== undefined && t.amount !== undefined) {\r\n            this.setState({\r\n                from: t.from,\r\n                to: t.to,\r\n                amount: t.amount,\r\n            });\r\n        }\r\n    }\r\n\r\n    state : transactionState = {\r\n        from: 0,\r\n        to: 0,\r\n        amount: 0\r\n    }\r\n\r\n    sign = () => {\r\n        if(this.state.from !== -1 && this.state.to !== -1 && this.state.amount !== -1) {\r\n            let t = this.props.transaction;\r\n            t.from = this.state.from;\r\n            t.to = this.state.to;\r\n            t.amount = this.state.amount\r\n\r\n            this.props.signFunction(t);\r\n        } else {\r\n            showError(\"All values must be set to sign a transaction!\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return <Draggable draggableId={\"transaction\" + this.props.transaction.id} index={this.props.index}>\r\n            {(provided, snapshot) => (\r\n                    <div className={\"transaction listElement\" + (snapshot.isDragging ? \" transactionDragging\" : \"\")}\r\n                         ref={provided.innerRef}\r\n                         {...provided.draggableProps}\r\n                         {...provided.dragHandleProps}\r\n                    >\r\n                        <table className={\"transactionTable listTable\"}>\r\n                            <tbody>\r\n                            <tr>\r\n                                <td className={\"id\"}>{this.props.transaction.id}</td>\r\n                                <td className={\"from\" + (!this.props.transaction.editable ? \" biggerText\" : \"\")}>\r\n                                    {\r\n                                        this.props.transaction.editable ?\r\n                                            <select className={\"selectStyle\"}\r\n                                                    value={this.state.from}\r\n                                                onChange={(v) => {\r\n                                                let newValue = parseInt(v.target.value);\r\n                                                if(this.state.from !== newValue) {\r\n                                                    this.props.removeSignatureFunction(this.props.transaction.id);\r\n                                                    this.setState({from: newValue});\r\n                                                }\r\n                                            }}>\r\n                                                {\r\n                                                    Array.from(Array(this.props.numberOfAccounts).keys()).map(x => {\r\n                                                    return <option value={x} key={x}>{x}</option>\r\n                                                })}\r\n                                            </select>\r\n                                            :\r\n                                            this.props.transaction.from\r\n                                    }\r\n                                </td>\r\n                                <td className={\"to\" + (!this.props.transaction.editable ? \" biggerText\" : \"\")}>\r\n                                    {\r\n                                        this.props.transaction.editable ?\r\n                                            <select className={\"selectStyle\"}\r\n                                                    value={this.state.to}\r\n                                                    onChange={(v) => {\r\n                                                        let newValue = parseInt(v.target.value);\r\n                                                        if(this.state.to !== newValue) {\r\n                                                            this.props.removeSignatureFunction(this.props.transaction.id);\r\n                                                            this.setState({to: newValue});\r\n                                                        }\r\n                                                    }}>\r\n                                                {\r\n                                                    Array.from(Array(this.props.numberOfAccounts).keys()).map(x => {\r\n                                                        return <option value={x} key={x}>{x}</option>\r\n                                                    })}\r\n                                            </select>\r\n                                            :\r\n                                            this.props.transaction.to\r\n                                    }\r\n                                </td>\r\n                                <td className={\"amount\"}>\r\n                                    {\r\n                                        this.props.transaction.editable ?\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                className={\"amountInput\"}\r\n                                                min=\"0\"\r\n                                                max=\"1000\"\r\n                                                value={this.state.amount}\r\n                                                onChange={(event) => {\r\n                                                    let val = parseInt(event.target.value);\r\n\r\n                                                    if(!isNaN(val)) {\r\n                                                        let oldValue = this.state.amount;\r\n                                                        if (oldValue !== val) {\r\n                                                            this.props.removeSignatureFunction(this.props.transaction.id);\r\n                                                        }\r\n\r\n                                                        this.setState({amount: val});\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                            :\r\n                                            this.props.transaction.amount\r\n                                    }\r\n                                </td>\r\n                                <td className={\"signature\" + (this.props.transaction.signed ? \" smallText\" : \"\")}>\r\n                                    {\r\n                                        this.props.transaction.signed ?\r\n                                            this.props.transaction.signature\r\n                                            :\r\n                                            <div className={\"signButton\"} onClick={() => this.sign()}>Sign</div>\r\n                                    }\r\n                                </td>\r\n                            </tr>\r\n                            <tr className={\"description\"}>\r\n                                <td>ID</td>\r\n                                <td>From</td>\r\n                                <td>To</td>\r\n                                <td>Amount</td>\r\n                                <td>Signature</td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n            )}\r\n        </Draggable>;\r\n    }\r\n}\r\n\r\nexport default Transaction;","import React from 'react';\r\nimport './UpperList.scss';\r\nimport {account, settings, transcation} from \"../../Utils/Interfaces\";\r\nimport Account from \"../Account/Account\";\r\nimport Transaction from \"../Transaction/Transaction\";\r\nimport {Droppable} from \"react-beautiful-dnd\";\r\n\r\ninterface UpperListProps {\r\n    title: string;\r\n    accounts?: account[],\r\n    transactions?: transcation[],\r\n    transactionOrder?: number[],\r\n    numberOfAccounts?: number,\r\n    settings?: settings[],\r\n    className?: string\r\n    addFunction?: any\r\n    signFunction?: any,\r\n    removeSignatureFunction?: any,\r\n    blockList?: boolean,\r\n    droppableId: string,\r\n    dropDisabled?: boolean,\r\n    lastConfirmedBlock?: number\r\n}\r\n\r\nclass UpperList extends React.Component<UpperListProps, {}> {\r\n    render() {\r\n        let printFunction : any = (err : any) => {return <div className={\"listError\"}>{err}</div>};\r\n        let arg : any = \"Error\";\r\n        if(this.props.accounts) {\r\n            printFunction = this.printAccountList;\r\n            arg = this.props.accounts;\r\n        } else if(this.props.transactions) {\r\n            printFunction = this.printTransactionList;\r\n            arg = this.props.transactions\r\n        }\r\n\r\n        let addFunction = this.props.addFunction;\r\n        if(!addFunction) addFunction = () => {console.log(\"Error: function is not defined\")};\r\n\r\n        return (<div className={\"upperListContainer \" + this.props.className}>\r\n            {\r\n                this.props.blockList ?\r\n                    \"\"\r\n                    :\r\n                    <div className={\"upperListTitle\"}>{this.props.title}</div>\r\n\r\n            }\r\n                            <Droppable droppableId={this.props.droppableId} isDropDisabled={this.props.dropDisabled}>\r\n                                {(provided, snapshot) => (\r\n                                    <div ref={provided.innerRef}\r\n                                        {...provided.droppableProps}\r\n                                        className={\"upperList\"}\r\n                                         style={{backgroundColor: snapshot.isDraggingOver ? \"rgba(255,255,255,0.05)\" : \"\"}}\r\n                                    >\r\n                                        {printFunction(arg)}\r\n                                        {provided.placeholder}\r\n                                    </div>\r\n                                    )}</Droppable>\r\n            {\r\n                this.props.blockList ?\r\n                    \"\"\r\n                    :\r\n            <div className={\"addButtonContainer\"}>\r\n                <div className={\"addButton\"} onClick={() => addFunction()}>\r\n                    Add\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>);\r\n    }\r\n\r\n    printAccountList = (accounts : account[]) => {\r\n        let lastConfirmedBlock = this.props.lastConfirmedBlock ?? -1;\r\n\r\n        return accounts.map(function (value, index, array) {\r\n            return <Account account={value} key={value.id} lastConfirmedBlock={lastConfirmedBlock}/>;\r\n        });\r\n    }\r\n\r\n    printTransactionList = (transactions : transcation[]) => {\r\n        let numberOfAccounts = 0;\r\n        if(this.props?.numberOfAccounts) {\r\n            numberOfAccounts = this.props.numberOfAccounts\r\n        }\r\n        let transactionOrder = this.props.transactionOrder;\r\n        if(transactionOrder === undefined) transactionOrder = [];\r\n        let signFunction = this.props.signFunction;\r\n        let removeSignatureFunction = this.props.removeSignatureFunction;\r\n\r\n        return (transactionOrder.map(function (value, index, array) {\r\n            return <Transaction transaction={transactions[value]} numberOfAccounts={numberOfAccounts} key={value}\r\n                                signFunction={signFunction} removeSignatureFunction={removeSignatureFunction} index={index}/>\r\n        }));\r\n    }\r\n}\r\n\r\nexport default UpperList;","export const validStartHash = \"0\".repeat(3);\r\n\r\nexport interface account {\r\n    id: number,\r\n    privateKey?: string,\r\n    privateKeyArray?: Uint8Array\r\n    address?: string,\r\n    addressArray?: Uint8Array\r\n    balanceBeforeBlock: number[]\r\n}\r\n\r\nexport interface transcation {\r\n    id: number,\r\n    from?: number,\r\n    to?: number,\r\n    amount?: number,\r\n    signed: boolean\r\n    signature?: string,\r\n    signatureArray?: Uint8Array\r\n    editable: boolean\r\n}\r\n\r\nexport interface settings {\r\n    name: string,\r\n    toggle: boolean,\r\n    possibleValues?: string[],\r\n    currentState: string | boolean\r\n}\r\n\r\nexport interface keyAddressPair {\r\n    privateKey: string,\r\n    privateKeyArray?: Uint8Array\r\n    address: string,\r\n    addressArray: Uint8Array\r\n}\r\n\r\nexport interface signaturePair {\r\n    signature: string,\r\n    signatureArray: Uint8Array\r\n}\r\n\r\nexport interface block {\r\n    id: number,\r\n    prevHash?: string,\r\n    transactions: number[],\r\n    nonce?: number,\r\n    hash?: string,\r\n    confirmed: boolean\r\n}","import React from 'react';\r\nimport \"./Blockchain.scss\";\r\nimport {block, transcation, validStartHash} from \"../../Utils/Interfaces\";\r\nimport UpperList from \"../UpperList/UpperList\";\r\n\r\ninterface BlockProps {\r\n    block: block,\r\n    transactions: transcation[],\r\n    confirmFunction: any\r\n}\r\n\r\nclass Block extends React.Component<BlockProps, {}> {\r\n    printTransactionList = () => {\r\n        return  <UpperList\r\n                        droppableId={\"block\" + this.props.block.id}\r\n                        title={\"transactions\"}\r\n                        transactions={this.props.transactions}\r\n                        transactionOrder={this.props.block.transactions}\r\n                        className={\"transactionListContainer\"}\r\n                        blockList={true}/>\r\n    }\r\n\r\n    confirmFunction = () => {\r\n        this.props.confirmFunction(this.props.block.id);\r\n    }\r\n\r\n    render() {\r\n        return <div className={\"blockContainer\"}>\r\n            <div className={\"block\"}>\r\n                <div className={\"prevHash blockSmallText\"}>\r\n                    {this.props.block?.prevHash}\r\n                    <div className={\"blockDescription\"}>Previous hash</div>\r\n                </div>\r\n                <div className={\"transactions\"}>\r\n                    <div className={\"transactionList\"}>\r\n                        {this.printTransactionList()}\r\n                    </div>\r\n                    <div className={\"blockDescription\"}>Transactions</div>\r\n                </div>\r\n                <div className={\"nonce\"}>\r\n                    {this.props.block?.nonce}\r\n                    <div className={\"blockDescription\"}>Nonce</div>\r\n                </div>\r\n                <div className={\"confirmContainer\"}>\r\n                    {\r\n                        this.props.block.confirmed ?\r\n                            <span className={\"confirmedString\"}>confirmed</span>\r\n                            :\r\n                            <div className={\"confirmButton\"} onClick={() => this.confirmFunction()}>\r\n                                Confirm\r\n                            </div>\r\n                    }\r\n                    <div className={\"blockDescription\"}>Confirmation</div>\r\n                </div>\r\n                <div className={\"hash blockSmallText\"}>\r\n                    {\r\n                        this.props.block.confirmed ?\r\n                            <span>\r\n                                <span className={\"confirmedString\"}>{validStartHash}</span>\r\n                                {this.props.block?.hash?.substr(validStartHash.length)}\r\n                            </span>\r\n                            :\r\n                            this.props.block?.hash\r\n                    }\r\n                    <div className={\"blockDescription\"}>Hash</div>\r\n                </div>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default Block;","import React from 'react';\r\nimport \"./Blockchain.scss\";\r\nimport {block, transcation} from \"../../Utils/Interfaces\";\r\nimport Block from \"./Block\";\r\nimport {ReactComponent as Arrow} from \"../../res/arrowright.svg\";\r\n\r\ninterface BlockchainProps {\r\n    blocks: block[],\r\n    transactions: transcation[],\r\n    confirmFunction: any\r\n}\r\n\r\nclass Blockchain extends React.Component<BlockchainProps, {}> {\r\n    render() {\r\n        return <div className={\"blockchain\"}>\r\n            {this.printBlocks()}\r\n        </div>;\r\n    }\r\n    printBlocks = () => {\r\n        let transactions = this.props.transactions;\r\n        let confirmFunction = this.props.confirmFunction;\r\n\r\n        return this.props.blocks.map(function (value, index, array) {\r\n            return (\r\n                <React.Fragment key={index}>\r\n                    <Block\r\n                        block={value}\r\n                        transactions={transactions}\r\n                        confirmFunction={confirmFunction}\r\n                    />\r\n                    {index !== array.length -1 ? <div className={\"arrows\"}><Arrow /></div> : \"\" }\r\n                </React.Fragment>\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\nexport default Blockchain;","import React from 'react';\nimport './App.scss';\nimport UpperList from \"./Components/UpperList/UpperList\";\nimport {account, block, signaturePair, transcation, validStartHash} from \"./Utils/Interfaces\";\nimport {\n    blockToString,\n    generateBlockHash,\n    generateKeyAddressPair,\n    signTransaction,\n    verifyAllBlockTransactions\n} from \"./Utils/Functions\";\nimport Blockchain from \"./Components/Blockchain/Blockchain\";\nimport {DragDropContext} from \"react-beautiful-dnd\";\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {showError, showWarning} from \"./Utils/ToastFunctions\";\nimport {sha256} from \"js-sha256\";\n\ninterface AppProps {\n}\n\ninterface AppState {\n    accountIdCount: number,\n    accounts: account[],\n    transactionIdCount: number,\n    transactions: transcation[],\n    unusedTransactions: number[],\n    blockIdCount: number,\n    blocks: block[],\n    lastConfirmedBlock: number,\n    lastUnusedBlock: number\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n\n        this.state = {\n            accountIdCount: 0,\n            accounts: [],\n            transactionIdCount: 0,\n            transactions: [],\n            unusedTransactions: [],\n            blockIdCount: 2,\n            blocks: [{\n                id: 0,\n                prevHash: validStartHash,\n                nonce: 0,\n                transactions: [],\n                confirmed: false\n            },{\n                id: 1,\n                nonce: 0,\n                transactions: [],\n                confirmed: false\n            }],\n            lastConfirmedBlock: -1,\n            lastUnusedBlock: 1\n        };\n\n        this.recalculateBlocks();\n    }\n\n    addAccount = () : void => {\n        let keys = generateKeyAddressPair();\n        let count = this.state.accountIdCount;\n\n        let balance = Math.floor(Math.random() * 1001);\n\n        let a : account = {\n            id: count,\n            privateKey: keys.privateKey,\n            privateKeyArray: keys.privateKeyArray,\n            address: keys.address,\n            addressArray: keys.addressArray,\n            balanceBeforeBlock: Array(this.state.lastConfirmedBlock+2).fill(balance)\n        }\n        this.setState({accountIdCount: count + 1});\n\n        let arr : account[] = this.state.accounts;\n        arr.push(a);\n        this.setState({accounts: arr});\n    }\n\n    addTransaction = () : void => {\n        let count = this.state.transactionIdCount;\n\n        let t : transcation = {\n            id: count,\n            signed: false,\n            editable: true\n        }\n        this.setState({transactionIdCount: count + 1});\n\n        let arr : transcation[] = this.state.transactions;\n        let unusedArr : number[] = this.state.unusedTransactions;\n        arr.push(t);\n        unusedArr.push(t.id);\n        this.setState({transactions: arr, unusedTransactions: unusedArr});\n    }\n\n    signTransaction = (t: transcation) => {\n        if(this.state.accounts.length === 0) {\n            showError(\"At least one account is needed to set all transaction values!\");\n            return;\n        }\n\n        if(t.from === undefined || t.to === undefined) {\n            showError(\"All values have to be set to sign a transaction!\");\n            return;\n        }\n\n        let sender : number = t.from;\n\n        let privateKey = this.state.accounts[sender].privateKeyArray;\n        let address = this.state.accounts[sender].addressArray;\n\n        if(sender !== -1 && privateKey !== undefined && address !== undefined) {\n            let sig : signaturePair = signTransaction(t, privateKey);\n\n            let transactionArray = this.state.transactions;\n\n            transactionArray[t.id].signed = true;\n            transactionArray[t.id].signatureArray = sig.signatureArray;\n            transactionArray[t.id].signature = sig.signature;\n\n            this.setState({transactions: transactionArray});\n        }\n    }\n\n    removeSignature = (id : number) => {\n        let transactionArray : transcation[] = this.state.transactions;\n        let t : transcation = transactionArray[id];\n\n        t.signed = false;\n        t.signatureArray = undefined;\n        t.signature = undefined;\n\n        transactionArray[id] = t;\n\n        this.setState({transactions: transactionArray});\n    }\n\n    recalculateBlocks = () => {\n        let blocks = [...this.state.blocks];\n        let transactions = [...this.state.transactions];\n\n        let lastUnused = this.state.lastUnusedBlock;\n        let nextId = this.state.blockIdCount;\n        if(blocks[blocks.length-1].confirmed || blocks[blocks.length-1].transactions.length !== 0) {\n            blocks.push({\n                id: nextId,\n                nonce: 0,\n                transactions: [],\n                confirmed: false\n            });\n            lastUnused = nextId++;\n        }\n\n        let changed = false;\n        let lastConfirmed = this.state.lastConfirmedBlock;\n\n        for(let i = 0; i < blocks.length; i++) {\n            let hash = generateBlockHash(blocks[i], transactions);\n            if(hash === \"\") {\n                console.log(\"Error while generating hash, see previous error-messages!\");\n                return;\n            }\n            if(hash !== blocks[i].hash) {\n                if(!changed && lastConfirmed > i-1) {\n                    lastConfirmed = i-1;\n                }\n\n                changed = true;\n            }\n            if(changed) {\n                blocks[i].confirmed = false;\n            }\n\n            blocks[i].hash = hash;\n            if(i !== blocks.length-1) {\n                blocks[i+1].prevHash = hash;\n            }\n        }\n\n        this.setState({blocks: blocks, lastUnusedBlock: lastUnused, lastConfirmedBlock: lastConfirmed,blockIdCount: nextId});\n    }\n\n    confirmBlock = (id : number) => {\n        let blocks = [...this.state.blocks];\n        let transactions = [...this.state.transactions];\n        let accounts = [...this.state.accounts];\n\n        if(id !== 0 && !blocks[id-1].confirmed) {\n            showWarning(\"All previous blocks need to be confirmed first!\");\n            return;\n        }\n\n        let transactionsValidated = verifyAllBlockTransactions(blocks[id], transactions, accounts);\n\n        if(!transactionsValidated) {\n            showError(\"Some transactions could not be verified!\");\n            return;\n        }\n\n        let balancesAfterBlock : number[] = [];\n        for(let i = 0; i < accounts.length; i++) {\n            balancesAfterBlock[i] = accounts[i].balanceBeforeBlock[id];\n        }\n\n        for(let i = 0; i < blocks[id].transactions.length; i++) {\n            let t = transactions[blocks[id].transactions[i]];\n\n            if(t.from === undefined || t.to === undefined || t.amount === undefined) return;\n\n            let newFromValue = balancesAfterBlock[t.from] - t.amount;\n            if(newFromValue < 0) {\n                showError(\"Transaction \" + t.id + \" could not be confirmed, account \" + t.from + \" doesn't have enough balance for this transaction!\");\n                for(let j = 0; j < accounts.length; j++) {\n                    accounts[j].balanceBeforeBlock = accounts[j].balanceBeforeBlock.slice(0, id+1);\n                }\n                this.setState({accounts: accounts});\n                return;\n            }\n\n            balancesAfterBlock[t.from] = balancesAfterBlock[t.from] - t.amount;\n            balancesAfterBlock[t.to] = balancesAfterBlock[t.to] + t.amount;\n        }\n\n        for(let i = 0; i < accounts.length; i++) {\n            accounts[i].balanceBeforeBlock[id+1] = balancesAfterBlock[i];\n        }\n\n        let hash = \"\";\n        let block = blocks[id];\n        let nonce = -1;\n\n        let blockString = blockToString(block, transactions);\n\n        do {\n            nonce++;\n            hash = sha256(blockString + nonce);\n        } while(!hash.startsWith(validStartHash) && nonce < 1000000)\n\n        if(nonce >= 1000000 && !hash.startsWith(validStartHash)) {\n            showError(\"Could not validate block!\");\n            console.log(\"Didn't find nonce in 10000 iterations\");\n            return;\n        }\n\n        block.nonce = nonce;\n        block.confirmed = true;\n        block.hash = hash;\n        blocks[id] = block;\n\n        this.setState({blocks: blocks, lastConfirmedBlock: block.id, accounts: accounts}, () => {\n            this.recalculateBlocks();\n        });\n    }\n\n    onDragEnd = (result : any) => {\n        let {destination, source, draggableId} = result;\n\n        if(result.destination === null) return;\n        if(destination.droppableId === source.droppableId && destination.index  === source.index) return;\n\n        let sourceIndex : number = result.source.index;\n        let destinationIndex : number = result.destination.index;\n        let transactionId : number = parseInt(draggableId.replace(\"transaction\", \"\"));\n\n        let transactionList = this.state.transactions;\n        let unusedTransactions = this.state.unusedTransactions;\n        let blocks = this.state.blocks;\n\n        if(result.destination.droppableId === \"transactionList\") {\n            if(result.source.droppableId === \"transactionList\") {\n                unusedTransactions.splice(sourceIndex, 1);\n                unusedTransactions.splice(destinationIndex, 0, transactionId);\n\n                this.setState({unusedTransactions: unusedTransactions});\n            } else {\n                let source = result.source.droppableId.replace(\"block\", \"\");\n                let blockId = parseInt(source);\n\n                blocks[blockId].transactions.splice(sourceIndex, 1);\n\n                unusedTransactions.splice(destinationIndex, 0, transactionId);\n\n                transactionList[transactionId].editable = true;\n\n                this.setState({blocks: blocks, unusedTransactions: unusedTransactions, transactions: transactionList});\n            }\n        } else {\n            if(result.source.droppableId === \"transactionList\") {\n                let transactionList = this.state.transactions;\n                if(!transactionList[transactionId].signed) {\n                    showError(\"Transaction must be signed to be included in a block!\");\n                    return;\n                }\n\n                unusedTransactions.splice(sourceIndex, 1);\n\n                let blockId = parseInt(result.destination.droppableId.replace(\"block\", \"\"));\n                let blockIndex = result.destination.index;\n                blocks[blockId].transactions.splice(blockIndex, 0, transactionId);\n\n                transactionList[transactionId].editable = false;\n\n                this.setState({unusedTransactions: unusedTransactions, blocks: blocks, transactions: transactionList});\n            }  else {\n                // Source and destination are blocks\n                let sourceBlockId = parseInt(result.source.droppableId.replace(\"block\", \"\"));\n                let destinationBlockId = parseInt(result.destination.droppableId.replace(\"block\", \"\"));\n\n                if(sourceBlockId === destinationBlockId) {\n                    let blocks = this.state.blocks;\n                    let transactions = blocks[sourceBlockId].transactions;\n\n                    transactions.splice(sourceIndex, 1);\n                    transactions.splice(destinationIndex, 0, transactionId);\n\n                    blocks[sourceBlockId].transactions = transactions;\n                    this.setState({blocks: blocks});\n                } else {\n                    let sourceTransactions = blocks[sourceBlockId].transactions;\n                    sourceTransactions.splice(sourceIndex, 1);\n                    blocks[sourceBlockId].transactions = sourceTransactions;\n\n                    let destinationTransactions = blocks[destinationBlockId].transactions;\n                    destinationTransactions.splice(destinationIndex, 0, transactionId);\n                    blocks[destinationBlockId].transactions = destinationTransactions;\n\n                    this.setState({blocks: blocks});\n                }\n            }\n        }\n\n        this.recalculateBlocks();\n    }\n\n    render() {\n        return <div className=\"App\">\n            <DragDropContext onDragEnd={this.onDragEnd}>\n            <div id={\"upperContent\"}>\n                <UpperList\n                    title={\"accounts\"}\n                    accounts={this.state.accounts}\n                    droppableId={\"accountList\"}\n                    lastConfirmedBlock={this.state.lastConfirmedBlock}\n                    className={\"accountListContainer\"}\n                    addFunction={this.addAccount}\n                    dropDisabled={true}\n                />\n                <UpperList\n                    title={\"transactions\"}\n                    transactions={this.state.transactions}\n                    transactionOrder={this.state.unusedTransactions}\n                    numberOfAccounts={this.state.accountIdCount}\n                    className={\"transactionListContainer\"}\n                    droppableId={\"transactionList\"}\n                    addFunction={this.addTransaction}\n                    signFunction={this.signTransaction}\n                    removeSignatureFunction={this.removeSignature}\n                />\n            </div>\n            <div id={\"blockchainContent\"}>\n                <Blockchain\n                    blocks={this.state.blocks}\n                    transactions={this.state.transactions}\n                    confirmFunction={this.confirmBlock}\n                />\n            </div>\n            <div id={\"footer\"}>\n                by nils lambertz\n            </div></DragDropContext>\n            <ToastContainer />\n        </div>;\n    };\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","import {account, block, keyAddressPair, signaturePair, transcation} from \"./Interfaces\";\r\nimport nacl, {BoxKeyPair} from \"tweetnacl\";\r\nimport util from \"tweetnacl-util\";\r\nimport {encode} from \"@stablelib/utf8\";\r\nimport {sha256} from \"js-sha256\";\r\n\r\nfunction getStringfromArray(array : Uint8Array) {\r\n    return Buffer.from(util.encodeBase64(array), \"base64\").toString(\"hex\");\r\n}\r\n\r\nfunction getArrayfromString(str : string) : Uint8Array {\r\n    return encode(str);\r\n}\r\n\r\nexport function generateKeyAddressPair() : keyAddressPair {\r\n    let pair : BoxKeyPair = nacl.sign.keyPair();\r\n\r\n    let privateKey = getStringfromArray(pair.secretKey);\r\n    let address = getStringfromArray(pair.publicKey);\r\n\r\n    return {\r\n        privateKey: privateKey,\r\n        privateKeyArray: pair.secretKey,\r\n        address: address,\r\n        addressArray: pair.publicKey\r\n    }\r\n}\r\n\r\nexport function signTransaction(t : transcation, privateKeyArray : Uint8Array) : signaturePair {\r\n    let message : string = transactionToString(t);\r\n    let messageArr = getArrayfromString(message);\r\n\r\n    let sig : Uint8Array = nacl.sign.detached(messageArr, privateKeyArray);\r\n\r\n    return {\r\n        signature: getStringfromArray(sig),\r\n        signatureArray: sig\r\n    };\r\n}\r\n\r\nexport function verifyTransaction(t: transcation, signatureArray : Uint8Array, addressArray : Uint8Array) : boolean {\r\n    let message : string = transactionToString(t);\r\n    let messageArr = getArrayfromString(message);\r\n\r\n    return nacl.sign.detached.verify(messageArr, signatureArray, addressArray);\r\n}\r\n\r\nexport function verifyAllBlockTransactions(b : block, transactions: transcation[], accounts: account[]) : boolean {\r\n    for(let i = 0; i < b.transactions.length; i++) {\r\n        let t = transactions[b.transactions[i]];\r\n        if (t.from !== undefined) {\r\n            let account = accounts[t.from];\r\n\r\n            if (t.signatureArray !== undefined && account.addressArray !== undefined) {\r\n                let verified = verifyTransaction(t, t.signatureArray, account.addressArray);\r\n                if (!verified) {\r\n                    console.log(\"Error in block \" + t.id + \": Signature in transaction \" + t.id + \" could not be verified!\");\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function generateBlockHash(b : block, transactions: transcation[]) : string {\r\n    let blockString = blockToString(b, transactions) + b.nonce;\r\n    return sha256(blockString);\r\n}\r\n\r\nexport function blockToString(b : block, transactions: transcation[]) : string {\r\n    let transactionArray = [];\r\n    for(let i = 0; i < b.transactions.length; i++) {\r\n        let t = transactions[b.transactions[i]];\r\n        transactionArray.push(transactionToString(t));\r\n    }\r\n\r\n    let obj = {\r\n        prevHash: b.prevHash,\r\n        transactions: transactionArray\r\n    }\r\n\r\n    return JSON.stringify(obj);\r\n}\r\n\r\nfunction transactionToString(t :transcation) : string {\r\n    let obj = {\r\n        id: t.id,\r\n        from: t.from,\r\n        to: t.to,\r\n        amount: t.amount\r\n    }\r\n\r\n    return JSON.stringify(obj);\r\n}"],"sourceRoot":""}